name: RootFS Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *' # Executa todos os dias, às 2 UTC-3

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      LATEST_SNAPSHOT_DATE_FORMATTED: ${{ steps.get_latest_snapshot.outputs.LATEST_SNAPSHOT_DATE_FORMATTED }}
      CHANGES_FILE: ${{ steps.get_latest_snapshot.outputs.CHANGES_FILE }}

    steps:
    - name: Get the latest Tumbleweed snapshot date
      id: get_latest_snapshot
      run: |
        query_url="http://download.opensuse.org/tumbleweed/iso/"
        count=0
        latest_tumbleweed_snapshot=""
        while [ -z "$latest_tumbleweed_snapshot" ]; do
            date=$(date --date="${dataset_date} - $count day" +%Y%m%d)
            latest_tumbleweed_snapshot=$(curl -sL "$query_url" | grep -E "name.*Changes\.$date.txt" | sed -E 's/.*>(Changes\.[0-9]{8}\.txt)<.*/\1/')
            count=$((count+1))
        done
        latest_tumbleweed_snapshot_date=${latest_tumbleweed_snapshot//[!0-9]/}
        latest_tumbleweed_snapshot_date_formatted=$(date -d $latest_tumbleweed_snapshot_date +%Y-%m-%d)
        
        echo "Latest Tumbleweed snapshot date: $latest_tumbleweed_snapshot_date_formatted"

        echo "CHANGES_FILE=$query_url/$latest_tumbleweed_snapshot" >> $GITHUB_OUTPUT

        echo "LATEST_SNAPSHOT_DATE_FORMATTED=$latest_tumbleweed_snapshot_date_formatted" >> $GITHUB_ENV
        echo "LATEST_SNAPSHOT_DATE_FORMATTED=$latest_tumbleweed_snapshot_date_formatted" >> $GITHUB_OUTPUT

    - name: Check if snapshot is already released
      id: check_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        existing_release=$(gh release list --repo ${{ github.repository }} --limit 100 | grep 'Latest' | awk '{print $1}'| grep "$LATEST_SNAPSHOT_DATE_FORMATTED" || true)
        if [ -n "$existing_release" ]; then
          echo "Snapshot $LATEST_SNAPSHOT_DATE_FORMATTED already released. Exiting."
          exit 1
        else
          echo "Snapshot $LATEST_SNAPSHOT_DATE_FORMATTED not released yet. Proceeding."
          exit 0
        fi

  generate-rootfs:
    needs: check-new-release
    if: success()
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start openSUSE Tumbleweed container in privileged mode
      id: start_container
      run: |
        docker run -d --privileged \
          --name opensuse-tumbleweed \
          -v "${{ github.workspace }}:/workspace" \
          -w /workspace \
          registry.opensuse.org/opensuse/tumbleweed:latest \
          sleep infinity

    - name: Install required dependencies and tune Zypper
      run: |
        docker exec opensuse-tumbleweed zypper -n refresh
        docker exec opensuse-tumbleweed zypper -n install tar xz gawk wget gtk3-tools
        docker exec opensuse-tumbleweed sed -i '/^solver\.onlyRequires/s/^/# /' /etc/zypp/zypp.conf
        docker exec opensuse-tumbleweed sed -i '/^rpm\.install\.excludedocs/s/^/# /' /etc/zypp/zypp.conf

    - name: Run preparar-raiz script
      run: |
        docker exec opensuse-tumbleweed chmod +x /workspace/scripts-auxiliares/preparar-raiz
        docker exec opensuse-tumbleweed /workspace/scripts-auxiliares/preparar-raiz /workspace/rootfs s

    - name: Verify generated files
      run: |
        echo "Listing generated files in workspace..."
        echo " - Directory: ${{ github.workspace }}"
        ls -l ${{ github.workspace }}

    - name: Get current date
      run: echo "DATE=$(date +'%d/%m/%Y')" >> $GITHUB_ENV

    - name: Create Draft Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check-new-release.outputs.LATEST_SNAPSHOT_DATE_FORMATTED }}
        name: ${{ needs.check-new-release.outputs.LATEST_SNAPSHOT_DATE_FORMATTED }}
        draft: true
        body: "Raiz do sistema operacional openSUSE Tumbleweed, gerada em ${{ env.DATE }}. As mudanças são listadas abaixo:\n\n${{ needs.check-new-release.outputs.CHANGES_FILE }}"
        files: ${{ github.workspace }}/rootfs-${{ needs.check-new-release.outputs.LATEST_SNAPSHOT_DATE_FORMATTED }}.tar.xz.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Release
      run: |
        gh release edit ${{ needs.check-new-release.outputs.LATEST_SNAPSHOT_DATE_FORMATTED }} --draft=false --repo ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Stop and remove container
      if: always()
      run: |
        docker stop opensuse-tumbleweed
        docker rm opensuse-tumbleweed
