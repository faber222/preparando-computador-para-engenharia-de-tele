#!/bin/bash

### Funções auxiliares ###
desmontar_tudo(){
    local destino=$1

    ### Desmontando diretórios ###
    umount $destino/sys/firmware/efi/efivars
    umount $destino/boot/efi
    umount $destino/dev
    umount $destino/proc
    umount $destino/sys
    umount $destino
}

tentar(){
    local comando="$1"
    local tentativas=$2
    local tentativa_atual=0
    local espera=5

    until [ $tentativa_atual -ge $tentativas ]; do
        bash -c "$comando" && break

        echo -e "\nOcorreu um erro, tentando novamente em $espera segundos...\n"
        tentativa_atual=$((tentativa_atual + 1))
        sleep $espera

        if [ $tentativa_atual -eq $tentativas ]; then
            echo -e "\nApós $tentativas tentativas, o comando de instalação finalizou com erro."
            echo "Verifique se você está conectado a Internet e se há espaço suficiente na partição onde o sistema será instalado."

            echo ""
            while [[ "$tentar_novamente" != [sSnN] ]]; do
                read -p "Você deseja tentar repetir o passo que falhou? [S/N] " tentar_novamente
            done

            if [[ "$tentar_novamente" == [sS] ]]; then
                tentativa_atual=0
                unset tentar_novamente
            else
                echo ""
                echo "╔══════════════════════════════════════════════════════════════════════════════════════════╗"
                echo "║                                                                                          ║" 
                echo "║ Você pode tentar executar esse script novamente para reiniciar o processo de instalação. ║"
                echo "║                                                                                          ║" 
                echo "╚══════════════════════════════════════════════════════════════════════════════════════════╝"
                echo ""
                echo "Atenção: é preciso limpar a partição \"$particao_raiz\" afim de evitar conflitos."
                echo ""
                exit 1
            fi
        fi
    done
}

tipo_particao(){
    particao="$1"
    echo "$(/usr/sbin/blkid $particao | awk -F 'TYPE="' '{print $2}' | awk -F '"' '{print $1}')"
}

tamanho_particao(){
    particao="$1"
    echo "$(/usr/bin/lsblk -b $particao --output SIZE | grep -oP '\d+' | awk '{print $1}')"
}

converte_para_bytes() {
    entrada="$1"
    numero=$(echo "$entrada" | sed 's/[KMG]\?$//')
    unidade=$(echo "$entrada" | sed 's/[0-9]*\([KMG]\?\)$/\1/')

    case "$unidade" in
        "K") fator=1024 ;;
        "M") fator=$((1024 * 1024)) ;;
        "G") fator=$((1024 * 1024 * 1024)) ;;
        "T") fator=$((1024 * 1024 * 1024 * 1024)) ;;
        *) fator=1 ;;
    esac

    valor_em_bytes=$((numero * fator))
    echo "$valor_em_bytes"
}

valida_particao(){
    particao_informada="/dev/$1"
    tipo_particao_desejado="$2"
    capacidade_minima="$3"
    capacidade_minima_em_bytes="$(converte_para_bytes $3)"

    if [[ -b "$particao_informada" ]]; then
       particao_identificada="$(tipo_particao $particao_informada)"
 
       if [[ "$tipo_particao_desejado" == *"$particao_identificada"* ]]; then
           capacidade_particao="$(tamanho_particao $particao_informada)"
  
           if [[ "$capacidade_particao" -lt "$capacidade_minima_em_bytes" ]]; then
               printf "$vermelho"
               printf "\nA partição informada possui capacidade menor do que ${capacidade_minima}B.\n"
               printf "Por favor, informe uma partição com pelo menos $magenta${capacidade_minima}B$normal$vermelho de capacidade.\n"
               printf "$normal"
           else
               echo "$particao_informada"
           fi
       else
           printf "$vermelho"
           printf "\nA partição informada não está formatada como ${tipo_particao_desejado// / ou }.\n"
           printf "Por favor, informe uma partição válida ou formate-a para que fique de acordo.\n"
           printf "$normal"
       fi
    elif [ ! -z "$particao_informada" ]; then
        printf "$vermelho"
        printf "\nA partição informada não existe. Por favor, informe uma partição válida.\n"
        printf "$normal"
    fi
}

valida_dispositivo(){
    dispositivo_informado="/dev/$1"

    if [[ -b "$dispositivo_informado" ]]; then
        procura=$(ls -1 $dispositivo_informado* 2>/dev/null | wc -l)
        
        if [ $procura -gt 1 ]; then
            echo "$dispositivo_informado"
        else
            printf "$vermelho"
	    echo "\nO dispositivo informado é uma partição. Por favor, informe o dispositivo que contém a partição.\n"
            printf "$normal"
	fi
    else
        printf "$vermelho"
        printf "\nO dispositivo informado não existe. Por favor, informe um dispositivo válido.\n"
        printf "$normal"
    fi
}

mostra_preenchido(){
    valor1="$1"
    valor2="$2"
    texto="$3"

    if [ ! -z "$valor1" ] && [ ! -z "$valor2" ]; then
        printf "$texto"
        printf "$verde"
        printf "$valor1"
        printf "$normal\n"
    fi
}

arquivo_bootloader(){
    if [ -d /sys/firmware/efi ]; then
        printf '%s\n' \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	list(grub,grub2,grub2-efi,none)" \
        "## Default:	grub2" \
        "#" \
        "# Type of bootloader in use." \
        "# For making the change effect run bootloader configuration tool" \
        "# and configure newly selected bootloader" \
        "#" \
        "#" \
        "LOADER_TYPE=\"grub2-efi\"" \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	yesno" \
        "## Default:	\"no\"" \
        "#" \
        "# Enable Secure Boot support" \
        "# Only available on UEFI systems and IBM z15+." \
        "#" \
        "#" \
        "SECURE_BOOT=\"yes\"" \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	yesno" \
        "## Default:	\"no\"" \
        "#" \
        "# Enable Trusted Boot support" \
        "# Only available on hardware with a Trusted Platform Module." \
        "#" \
        "TRUSTED_BOOT=\"yes\"" \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	yesno" \
        "## Default:	\"yes\"" \
        "#" \
        "# Update nvram boot settings (UEFI, OF)" \
        "# Unset to preserve specific settings or workaround firmware issues." \
        "#" \
        "UPDATE_NVRAM=\"yes\""
    else
        printf '%s\n' \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	list(grub,grub2,grub2-efi,systemd-boot,none)" \
        "## Default:	grub2" \
        "#" \
        "# Type of bootloader in use." \
        "# For making the change effect run bootloader configuration tool." \
        "# and configure newly selected bootloader." \
        "#" \
        "#" \
        "LOADER_TYPE=\"grub2\"" \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	yesno" \
        "## Default:	\"no\"" \
        "#" \
        "# Enable Secure Boot support" \
        "# Only available on UEFI systems and IBM z15+." \
        "#" \
        "#" \
        "SECURE_BOOT=\"yes\"" \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	yesno" \
        "## Default:	\"no\"" \
        "#" \
        "# Enable Trusted Boot support" \
        "# Only available on hardware with a Trusted Platform Module." \
        "#" \
        "TRUSTED_BOOT=\"no\"" \
        "" \
        "## Path:	System/Bootloader" \
        "## Description:	Bootloader configuration" \
        "## Type:	yesno" \
        "## Default:	\"yes\"" \
        "#" \
        "# Update nvram boot settings (UEFI, OF)" \
        "# Unset to preserve specific settings or workaround firmware issues." \
        "#" \
        "UPDATE_NVRAM=\"yes\""
    fi
}

ajuda(){
    echo -e "Seu comando não possui todos os argumentos necessários. Veja o uso e exemplo abaixo:\n"
    echo -e "Uso:\n"
    echo "    ./$0 \"partição onde o sistema será instalado\" \"partição EFI\" \"nome de usuário\" \"seu nome completo\""
    echo -e "\nEXEMPLO:\n"
    echo "    ./$0 /mnt /dev/sda1 joao \"João Pedro\""
    echo
}


### Variáveis preparatórias ###
destino=/mnt
tentivas_maximas=5
verde='\033[1;32m'
magenta='\033[1;35m'
vermelho='\033[1;31m'
normal='\033[0m'


# Verifica se o comando zypper está presente
if ! command -v "zypper" &> /dev/null; then
    printf "$vermelho"
    echo -e "\n O comando \"zypper\" não foi encontrado. Este script foi feito para ser executado em sistemas openSUSE.$normal\n"
    printf "$verde"
    echo -e " No link abaixo, pode baixar um ISO Live CD do openSUSE Tumbleweed:"
    echo -e "     https://download.opensuse.org/tumbleweed/iso/openSUSE-Tumbleweed-XFCE-Live-x86_64-Current.iso\n"
    echo -e " Após baixar o ISO, grave-o em um pendrive e dê boot por ele. Em seguida, abra um terminal execute este script.\n"
    printf "$normal"
    exit 1
fi

# Verifica se o usuário é o root
if [ "$EUID" -ne 0 ]; then
    printf "$vermelho"
    echo -e "\n Este script precisa ser executado como root.\n"
    printf "$verde"
    echo -e " Para tal, utilize o comando \"sudo $0\" ou"
    echo -e " execute-o como usuário root, usando os comandos:\n"
    echo -e " \"sudo su\" e em seguida \"$0\".\n"
    printf "$normal"
    exit 1
fi


### Mensagem de boas vindas ###
echo -e "\nOlá!! Este é o script de instalação completa do openSUSE Tumbleweed! Nesse tipo de instalação, serão instalados os pacotes principais e suas dependências, bem como pacotes sugeridos, ou seja, pacotes que não são necessários para o funcionamento das aplicações que serão instaladas, mas que podem adicionar recurso extra. Um exemplo disso são os pacotes de tradução. Neste script, os pacotes de tradução serão instalados explicitamente para evitar que alguma tradução acabe faltando."
echo -e "\nNo mais, aproveite!!\n"

particao_raiz_informada=$1

## UEFI ou BIOS
if [ -d /sys/firmware/efi ]; then
    particao_EFI_informada=$2
else
    dispositivo_boot_informado=$2
fi

senha_root=$3
usuario=$4
senha=$5
nome_completo=$6
nome_computador=$7
laptop=$8


### Identificação da CPUs presentes ###
cpu_info=$(grep -o -m 1 'vendor_id.*' /proc/cpuinfo | cut -d ':' -f 2 | tr -d '[:space:]')

if [ "$cpu_info" == "GenuineIntel" ]; then
    iGPU="intel"
elif [ "$cpu_info" == "AuthenticAMD" ]; then
    iGPU="amd"
fi

### Identificação das GPUs presentes ###
gpu_info=$(lspci | grep -E "VGA|3D controller")
num_gpus=$(echo "$gpu_info" | wc -l)

if echo "$gpu_info" | grep -qi 'Intel'; then
    pacotes_intel_gpu="intel-gpu-tools intel-media-driver intel-hybrid-driver intel-vaapi-driver"
fi

if echo "$gpu_info" | grep -qi 'AMD'; then
    pacotes_amd_gpu="radeontop radeontop-lang libvulkan_radeon libvdpau_radeonsi"
fi

if echo "$gpu_info" | grep -qi 'NVIDIA'; then
    # Nesse caso, os pacotes vêm de um repositório
    # próprio que será adicionado adiante
    instalar_nvidia="Sim"
fi


### Interação com o usuário para coletar os dados iniciais ###
# ajuda

echo "════════════════════════════════════════════════════════"

while [[ -z $particao_raiz ]]; do
    if [ -z "$particao_raiz_informada" ]; then
        read -p "Partição onde o sistema será instalado [ex.: sda2]: " particao_raiz_informada
    else
        particao_raiz_informada=$(basename $particao_raiz_informada)
        particao_validada="$(valida_particao $particao_raiz_informada "ext4 btrfs" 10G)"

        if [[ "/dev/$particao_raiz_informada" == "$particao_validada" ]]; then
            particao_raiz="$particao_validada"

            if [ -z $ja_rodou ]; then
                mostra_preenchido "$particao_raiz" "$1" "Partição onde o sistema será instalado: "
	    fi
            unset ja_rodou
        elif [ ! -z "$particao_raiz_informada" ]; then
            printf "$particao_validada\n"
            unset particao_raiz_informada
            ja_rodou="0"
        fi
    fi
done


## UEFI ou BIOS
if [ -d /sys/firmware/efi ]; then
    while [[ -z $particao_EFI ]]; do
        if [ -z "$particao_EFI_informada" ]; then
            read -p "Partição de inicialização EFI [ex.: sda1]: " particao_EFI_informada
        else
            particao_EFI_informada=$(basename $particao_EFI_informada)
            particao_validada="$(valida_particao $particao_EFI_informada "fat fat32 vfat fat16" 100M)"
    
            if [[ "/dev/$particao_EFI_informada" == "$particao_validada" ]]; then
                particao_EFI="$particao_validada"
   
                if [ -z $ja_rodou ]; then
                    mostra_preenchido "$particao_EFI" "$2" "Partição de inicialização EFI: "
                fi
                unset ja_rodou
            elif [ ! -z "$particao_EFI_informada" ]; then
                printf "$particao_validada\n"
                unset particao_EFI_informada
                ja_rodou="0"
            fi
        fi
    done
else
    while [[ -z $dispositivo_boot ]]; do
        if [ -z "$dispositivo_boot_informado" ]; then 
            read -p "Dispositivo de inicialização [ex.: sda]: " dispositivo_boot_informado
        else
            dispositivo_boot_informado=$(basename $dispositivo_boot_informado)
            dispositivo_boot_validado="$(valida_dispositivo $dispositivo_boot_informado)"
    
            if [[ "/dev/$dispositivo_boot_informado" == "$dispositivo_boot_validado" ]]; then 
                dispositivo_boot="$dispositivo_boot_validado"
   
                if [ -z $ja_rodou ]; then 
                    mostra_preenchido "$dispositivo_boot" "$2" "Dispositivo de inicialização: "
                fi   
                unset ja_rodou
            elif [ ! -z "$dispositivo_boot_informado" ]; then 
                printf "$dispositivo_boot_validado"
                unset dispositivo_boot_informado
                ja_rodou="0"
            fi   
        fi   
    done
fi


if [ -z "$senha_root" ]; then
    echo ""
    echo "╔═══════════════════════════════════════════════╗"
    echo "║                                               ║"
    echo "║ Definição de senha para o superusuário (root) ║"
    echo "║                                               ║"
    echo "╚═══════════════════════════════════════════════╝"

    printf "\n$magenta Por favor, escolha uma senha segura, pois este \n"
    printf " usuário pode realizar qualquer ação no sistema!! $normal\n\n"

    while [[ "$senha_root" != "$senha_root_redigitada" ]] || [[ -z "$senha_root" ]]
    do
        read -sp "Senha para o superusuário root (ficará oculta enquanto digitar): " senha_root
        echo
        read -sp "Confirme a senha: " senha_root_redigitada
        echo

        if [ "$senha_root" != "$senha_root_redigitada" ]; then
            echo -e "\nAs senhas digitadas são diferentes! Tente novamente.\n"
        fi
    done
else
    printf "\n$verde"
    printf "Senha para o usuário root: Já definida!$normal\n"
fi

echo -e "\n### Criação do seu usuário ###"

if [ -z "$usuario" ]; then
    read -p "Nome de usuário a ser criado: [ex.: joao]: " usuario
else
    printf "Nome de usuário a ser criado: [ex.: joao]: "
    printf "$verde"
    printf "$usuario"
    printf "$normal\n"
fi

if [ -z "$senha" ]; then
    while [[ "$senha" != "$senha_redigitada" ]] || [[ -z "$senha" ]]
    do
        read -sp "Senha para esse novo usuário (ficará oculta enquanto digitar): " senha
        echo
        read -sp "Confirme a senha: " senha_redigitada
        echo

        if [ "$senha" != "$senha_redigitada" ]; then
            echo -e "\nAs senhas digitadas são diferentes! Tente novamente.\n"
        fi
    done
else
    printf "$verde"
    printf "Senha para o novo usuário \"$usuario\": Já definida!"
    printf "$normal\n"
fi

if [ -z "$nome_completo" ]; then
    read -p "Nome completo para o novo usuário [ex.: João Pedro]: " nome_completo
else
    printf "Nome completo para o novo usuário [ex.: João Pedro]: "
    printf "$verde"
    printf "$nome_completo"
    printf "$normal\n"
fi

if [ -z "$nome_computador" ]; then
    read -p "Nome do computador (não pode conter espaços) [ex.: meupc]: " nome_computador
else
    printf "Nome do computador (não pode conter espaços) [ex.: meupc]: "
    printf "$verde"
    printf "$nome_computador"
    printf "$normal\n"
fi

if [ -z "$laptop" ] || [[ "$laptop" != [sSnN] ]]; then
    while [[ "$laptop" != [sSnN] ]]; do
        read -p "A instalação será realizada em um notebook? [S/N] " laptop
    done
else
    printf "A instalação será realizada em um notebook? [S/N] "
    printf "$verde"
    printf "$laptop"
    printf "$normal\n"
fi

echo -e "\nInformações coletadas:"
printf " - Partição onde o sistema será instalado: "
printf "$verde"
printf "$particao_raiz"
printf "$normal\n"

## UEFI ou BIOS
if [ -d /sys/firmware/efi ]; then
    printf " - Partição de inicialização EFI: "
    printf "$verde"
    printf "$particao_EFI" 
    printf "$normal\n"
else
    printf " - Dispositivo onde ocorrerá o boot: "
    printf "$verde"
    printf "$dispositivo_boot"
    printf "$normal\n"
fi

printf " - Nome de usuário a ser criado: "
printf "$verde"
printf "$usuario"
printf "$normal\n"

printf " - Nome completo para o novo usuário: "
printf "$verde"
printf "$nome_completo"
printf "$normal\n"

printf " - Nome do computador: "
printf "$verde"
printf "$nome_computador"
printf "$normal\n"

printf " - Suporte para placas de vídeo da NVIDIA: "

if [[ "$instalar_nvidia" == "Sim" ]]; then
    printf "$verde"
    printf "Sim"
    printf "$normal\n"
else
    printf "$vermelho"
    printf "Não"
    printf "$normal\n"
fi

echo -n " - Instalação em notebook: "

if [[ "$laptop" == [sS] ]]; then
    printf "$verde"
    echo "Sim"
    printf "$normal\n"
else
    printf "$vermelho"
    echo "Não"
    printf "$normal\n"
fi

echo -e "\n"

while [[ "$resposta" != [sSnN] ]]; do
    read -p "As informações acima estão corretas? [S/N] " resposta
done

if [[ "$resposta" == [nN] ]]; then
    echo -e "\nA instalação foi cancelada e nada foi alterado no seu computador. Execute-a novamente para recomeçar."
    echo ""
    exit 0
fi

### Montando a partição onde o sistema será instalado ###
mount $particao_raiz $destino

### Instalação do sistema base ###
pacotes_iniciais="libz1 libz1-x86-64-v3 zypper-needs-restarting systemd-lang systemd-container ca-certificates ca-certificates-mozilla curl gawk grep-lang sed-lang tar-lang xz-lang gzip procps-lang procps which systemd-presets-branding-openSUSE suse-module-tools suse-module-tools-scriptlets diffutils-lang man man-pages man-pages-posix man-pages-pt_BR tlp"

comando_1="zypper refresh -f"
comando_2="zypper -n --installroot $destino install -y -t product openSUSE"
comando_3="zypper -n --installroot $destino install -y $pacotes_iniciais"
comando_4="zypper -n --installroot $destino addlocale pt_BR"

tentar "$comando_1 && $comando_2 && $comando_3 && $comando_4" $tentivas_maximas

### Criação do arquivo de configuração do gestor de inicialização ###
arquivo_bootloader > $destino/etc/sysconfig/bootloader

### Bloqueando pacotes problemáticos ###
zypper -n --root $destino remove -u -y alsa-ucm-conf
zypper --root $destino addlock alsa-ucm-conf
zypper --root $destino addlock ifplugd

### Montando diretórios adicionais ###
mount --bind /sys $destino/sys
mount --bind /proc $destino/proc
mount --bind /dev $destino/dev
mkdir $destino/boot/efi

### Atualizando os certificados SSL ###
chroot $destino /usr/sbin/update-ca-certificates

### Adicionando os repositórios principais ###
echo -e "\nAdicionando repositórios principais.\n"

echo '[Open_Source_Software]
name=Open Source Software
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/tumbleweed/repo/oss/
path=/
type=rpm-md
priority=80
keeppackages=0' > $destino/etc/zypp/repos.d/Open_Source_Software.repo

echo '[Non_Open_Source_Software]
name=Non Open Source Software
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/tumbleweed/repo/non-oss/
path=/
type=rpm-md
priority=80
keeppackages=0' > $destino/etc/zypp/repos.d/Non_Open_Source_Software.repo

echo '[Update]
name=Update
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/update/tumbleweed/
type=rpm-md
priority=70
keeppackages=0' > $destino/etc/zypp/repos.d/Update.repo

echo '[Debug Packages]
name=Debug Packages
enabled=1
autorefresh=0
baseurl=http://download.opensuse.org/tumbleweed/repo/debug/
path=/
keeppackages=0' > $destino/etc/zypp/repos.d/Debug_Packages.repo

### Instalando o restante dos pacotes do sistema base ###
echo -e "\nInstalando padrões do sistema base.\n"

comando_1="zypper -n --root $destino --gpg-auto-import-keys refresh -f"
comando_2="zypper -n --root $destino install --download-in-advance -y -t pattern base enhanced_base minimal_base basesystem"

tentar "$comando_1 && $comando_2" $tentivas_maximas

### Adicionando os repositórios extras ###
echo -e "\nAdicionando repositórios extras.\n"

echo '[Open_Source_Software_Leap]
name=Open Source Software Leap
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/distribution/openSUSE-stable/repo/oss/
path=/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/Open_Source_Software_Leap.repo

echo "[Emulators]
name=Emulators
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/repositories/Emulators/openSUSE_Tumbleweed/
path=/
type=rpm-md
priority=60
keeppackages=0" > $destino/etc/zypp/repos.d/Emulators.repo

echo '[Multimedia_Proaudio]
name=Multimedia Proaudio
baseurl=http://download.opensuse.org/repositories/multimedia:/proaudio/openSUSE_Tumbleweed/
enabled=1
type=rpm-md
gpgcheck=1
gpgkey=https://download.opensuse.org/repositories/multimedia:/proaudio/openSUSE_Tumbleweed/repodata/repomd.xml.key
autorefresh=1' > $destino/etc/zypp/repos.d/Multimedia_Proaudio.repo

echo '[OpenH.264]
name=OpenH.264
enabled=1
autorefresh=1
baseurl=http://codecs.opensuse.org/openh264/openSUSE_Tumbleweed/
path=/
type=rpm-md
keeppackages=0' > $destino/etc/zypp/repos.d/OpenH.264.repo

if [[ $instalar_nvidia = "Sim" ]]; then
    echo -e '[NVIDIA]\nname=NVIDIA\nenabled=1\nautorefresh=1\nbaseurl=http://download.nvidia.com/opensuse/tumbleweed\ntype=rpm-md\nkeeppackages=0' > $destino/etc/zypp/repos.d/NVIDIA.repo
fi

echo '[Packman_Repository]
name=Packman Repository
enabled=1
autorefresh=1
baseurl=http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/
path=/
type=rpm-md
priority=50
keeppackages=0' > $destino/etc/zypp/repos.d/packman.repo

echo '[VSCode]
name=VSCode
enabled=1
autorefresh=1
baseurl=https://packages.microsoft.com/yumrepos/vscode
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/vscode.repo

echo '[X2go]
name=X2Go
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/repositories/X11:/RemoteDesktop:/x2go/openSUSE_Tumbleweed
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/X2Go.repo

echo '[libdvdcss]
name=libdvdcss
enabled=1
autorefresh=1
baseurl=http://opensuse-guide.org/repo/openSUSE_Tumbleweed/
path=/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/libdvdcss.repo

echo '[google-chrome]
name=google-chrome
enabled=1
autorefresh=1
baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
gpgcheck=1
gpgkey=http://dl.google.com/linux/linux_signing_key.pub
type=rpm-md
keeppackages=0' > $destino/etc/zypp/repos.d/google-chrome.repo

### Ajustando o servidor de DNS ###
echo "nameserver 8.8.8.8" > $destino/etc/resolv.conf

### Importando a chave do repositório do Visual Studio Code ###
comando_1="chroot $destino /usr/bin/rpm --import https://packages.microsoft.com/keys/microsoft.asc"

tentar "$comando_1" $tentivas_maximas

### Atualizando lista de pacotes, aplicando atualizações ###
### e instalando o restante do sistema base              ###
pacotes_base="kernel-default kernel-default-devel install-initrd-openSUSE NetworkManager-lang htop nload pipewire-lang pipewire-pulseaudio pipewire-alsa pipewire-aptx pipewire-module-x11-0_3 flatpak git ffmpeg-6 libvulkan1 unzip zip 7zip bzip2 unrar fish yt-dlp-fish-completion tealdeer-fish-completion tealdeer yt-dlp btop NetworkManager-bluetooth kernel-firmware-all yast2-control-center yast2-sudo yast2-trans-pt_BR yast2-sysconfig yast2-update yast2-services-manager yast2-security yast2-online-update yast2-online-update-configuration yast2-online-update-frontend yast2-installation xkeyboard-config-lang wget-lang glibc-lang glib-networking-lang glib2-lang chrony dejavu-fonts mkfontscale apparmor-utils-lang apparmor-parser-lang apparmor-abstractions terminus-bitmap-fonts firewalld-lang plymouth-theme-opensuse-beat yast2-ntp-client tree fastfetch libvirt avahi sensors cnf-rs-locale btop rpmrebuild gcc-c++ gdb gdbm-lang fuse-overlayfs bat bat-extras bat-fish-completion man-pages-pt_BR translation-update-pt_BR make-lang accountsservice-lang dialog-lang net-tools-lang psmisc-lang mlocate-lang findutils-lang exo-lang diffutils-lang cryptsetup-lang cpio-lang coreutils-lang bison-lang udisks2-lang ntfsprogs-extra libfsntfs-tools wireless-regdb syslog-ng android-tools android-udev-rules earlyoom net-tools-deprecated v4l2loopback-utils v4l2loopback-kmp-default v4l2loopback-autoload whois nmap tcpdump netavark ncdu kexec-tools python311-Glances rclone opi libguestfs libguestfs-rsync libguestfs0 libguestfs-rescue update-bootloader-rpm-macros patterns-base-bootloader fwupd fwupd-lang susepaste libfsntfs1 libfsntfs-tools nvtop duf libnvme-mi1 libnvme1 nvme-cli lsd python311-pipx ucode-intel ucode-amd $pacotes_intel_gpu $pacotes_amd_gpu system-group-wheel sudo-policy-wheel-auth-self system-user-mail sof-firmware pv"

comando_1="zypper -n --root $destino --gpg-auto-import-keys refresh -f"
comando_2="zypper -n --root $destino dist-upgrade -y --download-in-advance --allow-vendor-change --no-recommends"
comando_3="zypper -n --root $destino install -y --allow-vendor-change --download-in-advance $pacotes_base"
comando_4="zypper -n --root $destino install -y --allow-vendor-change --download-in-advance -t pattern apparmor fonts"

tentar "$comando_1 ; $comando_2 && $comando_3 && $comando_4" $tentivas_maximas

### (Bug fix) Instalação de versão mais antiga do wpa_supplicant ###
### que suporta autenticação com TLSv1.0, TLSv1.1 e TLSv1.2      ###
pesquisa=$(curl -sL https://download.opensuse.org/distribution/leap/15.4/repo/oss/x86_64/ | grep -Eai "name.*wpa_supplicant-2.9" | grep -v "32bit")
wpa_supplicant_2_9_rpm=$(echo "$pesquisa" | grep -oE '>[^<]+<' | sed 's/[^>]*>\([^<]*\)<.*/\1/')
wpa_supplicant_2_9_url="https://download.opensuse.org/distribution/leap/15.4/repo/oss/x86_64/$wpa_supplicant_2_9_rpm"

comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino install --oldpackage -y --allow-vendor-change $wpa_supplicant_2_9_url"

tentar "$comando_1 ; $comando_2" $tentivas_maximas
zypper --root $destino addlock wpa_supplicant
chroot $destino /usr/bin/update-crypto-policies --set LEGACY

### Instalação do grub (UEFI ou BIOS) ###
comando_1="zypper -n --root $destino refresh -f"

if [ -d /sys/firmware/efi ]; then
    echo -e "\nInstalando o GRUB em modo UEFI\n"
    comando_2="zypper -n --root $destino install -y --download-in-advance efitools efivar grub2-x86_64-efi-extras"
    tentar "$comando_1 ; $comando_2" $tentivas_maximas

    mount $particao_EFI $destino/boot/efi
    chroot $destino /usr/bin/mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    chroot $destino /usr/sbin/grub2-install
    opensuse_secureboot=(chroot $destino /usr/sbin/shim-install --config-file=/boot/grub2/grub.cfg)
else
    echo -e "\nInstalando o GRUB em modo BIOS\n"
    comando_2="zypper -n --root $destino install -y --download-in-advance grub2-i386-pc-extras"
    tentar "$comando_1 ; $comando_2" $tentivas_maximas
    chroot $destino /usr/sbin/grub2-install $dispositivo_boot
fi

sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=""/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash security=apparmor loglevel=3 nosimplefb=1"/' $destino/etc/default/grub
sed -i 's/.*GRUB_TERMINAL.*/GRUB_TERMINAL=gfxterm/' $destino/etc/default/grub
sed -i 's/.*GRUB_GFXMODE.*/GRUB_GFXMODE=auto/' $destino/etc/default/grub
echo "GRUB_DISABLE_OS_PROBER=\"false\"" >> $destino/etc/default/grub

echo
chroot $destino /usr/bin/dracut -f --regenerate-all
echo
chroot $destino /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
echo
"${opensuse_secureboot[@]}"
echo

### Ajustando o tema de inialização do sistema ###
chroot $destino /usr/sbin/plymouth-set-default-theme bgrt -R
chroot $destino /usr/bin/dracut -f --regenerate-all

### Ajustando os pontos de montagem no fstab (UEFI ou BIOS) ###
tipo_particao_raiz="$(tipo_particao $particao_raiz)"

if [ -d /sys/firmware/efi ]; then
    tipo_particao_EFI="$(tipo_particao $particao_EFI)"

    echo "$(/usr/sbin/blkid | grep "$particao_raiz" | awk '{print $2}') / $tipo_particao_raiz defaults 0 0" > $destino/etc/fstab
    echo "$(/usr/sbin/blkid | grep "$particao_EFI" | awk '{print $2}') /boot/efi $tipo_particao_EFI utf8 0 0" >> $destino/etc/fstab
else
    echo "$(/usr/sbin/blkid | grep "$particao_raiz" | awk '{print $2}') / $tipo_particao_raiz defaults 0 0" > $destino/etc/fstab
fi

### Instalando componentes gráficos, a área de trabalho e ferramentas extras ###
echo -e "\nInstalando componentes gráficos, a área de trabalho e ferramentas extras\n"

tema_breeze="$(zypper search breeze | grep -o 'breeze[0-9]\+' | uniq)"

componentes_graficos="xorg-x11-server-extra xorg-x11-driver-video xorg-x11-driver-input xinput xf86-input-joystick xorg-x11-fonts-core lightdm-lang lightdm-gtk-greeter-lang lightdm-gtk-greeter-settings-lang xscreensaver-data-extra gstreamer-plugins-ugly-codecs gstreamer-plugins-bad-codecs libavcodec56 libavcodec57 metatheme-adapta-common gtk3-metatheme-adapta gtk4-metatheme-adapta blueman-lang bluez NetworkManager-applet NetworkManager-connection-editor NetworkManager-connection-editor-lang polkit-gnome-lang libgnomesu0 xdg-desktop-portal-gtk-lang xdg-desktop-portal-lang xdg-terminal-exec yast2-theme-breeze opensuse-welcome-lang gvfs-lang tumbler tumbler-lang tumbler-webp-thumbnailer sox libva-utils xclip xclipboard libgnomesu-lang fontconfig-lang gtk3-lang gsettings-desktop-schemas-lang gstreamer-lang gstreamer-plugins-bad-lang gstreamer-plugins-base-lang gstreamer-plugins-ugly-lang upower-lang zenity-lang gdk-pixbuf-lang colord-lang firewall-config xkill mugshot yast2-usbauth yast2-update-FACTORY yast2-testsuite yast2-multipath yast2-devtools autoyast2 yast2-installation-control yast2-configuration-management yast2-support patterns-yast-yast2_desktop yast2-tune yast2-kdump yast2-journal libdvdcss2 qsynth-lang gstreamer-plugins-bad-fluidsynth fluidsynth libvulkan_intel libvulkan_radeon simplescreenrecorder google-noto-sans-cjk-fonts simple-scan-lang libgtkglext-x11-1_0-0 xdotool PackageKit-lang gnome-packagekit-lang gnome-packagekit-extras package-update-indicator-lang firewall-applet firewall-config xhost susepaste-screenshot libqt5-qtimageformats distribution-logos-openSUSE-icons distribution-logos-openSUSE wallpapers-openSUSE-extra qpwgraph gdk-pixbuf-loader-libavif webp-pixbuf-loader gdk-pixbuf-loader-libavif raw-thumbnailer jxl-thumbnailer rsvg-thumbnailer gdk-pixbuf-loader-rsvg $tema_breeze"

ambiente_XFCE="xfce4-panel-lang xfce4-panel-profiles xfce4-panel-restore-defaults xfce4-power-manager-lang xfce4-pulseaudio-plugin-lang pavucontrol-lang xfce4-screensaver xfce4-screenshooter-lang xfce4-session-lang xfce4-settings-lang xfce4-terminal-lang xfce4-datetime-plugin-lang xfce4-genmon-plugin-lang xfce4-kbdleds-plugin-lang xfce4-notifyd-lang xfce4-panel-lang xfce4-pulseaudio-plugin-lang xfce4-systemload-plugin-lang xfce4-notifyd-theme-adapta xfwm4-lang xfwm4-theme-adapta thunar-lang thunar-sendto-blueman thunar-plugin-media-tags-lang thunar-plugin-shares-lang thunar-volman-branding-openSUSE thunar-volman-lang thunar-plugin-archive-lang thunar-font-manager xfdesktop-lang xfce4-settings-color xfce4-sensors-plugin-lang xfce4-battery-plugin-lang xfce4-appfinder-lang xfce4-xkb-plugin-lang xfce4-weather-plugin-lang xfce4-docklike-plugin xfce4-whiskermenu-plugin-lang xfce4-panel-plugin-indicator-lang xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE ristretto-lang nomacs-lang"

ferramentas_extras="myspell-dictionaries myspell-en myspell-en_US myspell-lightproof-en myspell-lightproof-pt_BR myspell-pt_BR okular-lang libKF6Archive6-lang vlc-qt vlc vlc-lang vlc-codecs vlc-codec-gstreamer gnome-calculator-lang kcolorchooser-lang gnome-disk-utility-lang libvirt-daemon-qemu qemu-linux-user qemu-linux-user libvirt-daemon-qemu virt-manager qt5ct kolourpaint-lang libqt5-qtxmlpatterns-imports libQt5WebChannel5-imports gparted-lang pluma-lang engrampa-lang libreoffice libreoffice-branding-openSUSE libreoffice-l10n-pt_BR libreoffice-l10n-en libreoffice-branding-openSUSE libreoffice-calc libreoffice-draw libreoffice-filters-optional libreoffice-gnome libreoffice-gtk3 libreoffice-icon-themes libreoffice-impress libreoffice-l10n-en libreoffice-l10n-pt_BR libreoffice-mailmerge libreoffice-math libreoffice-pyuno libreoffice-share-linker libreoffice-writer MozillaFirefox MozillaFirefox-branding-openSUSE MozillaFirefox-translations-common MozillaFirefox-translations-other transmission-gtk-lang baobab-lang code gearlever-lang"

ambiente_de_trabalho="$ambiente_XFCE"

comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino install -y --allow-vendor-change --download-in-advance $componentes_graficos $ambiente_de_trabalho $ferramentas_extras"
comando_3="zypper -n --root $destino install -y --allow-vendor-change --download-in-advance -t pattern x11_yast x11"

tentar "$comando_1 ; $comando_2 && $comando_3" $tentivas_maximas

### Adicionando trava para que o pacote não seja removido durante atualizações ###
zypper --root $destino addlock package-update-indicator package-update-indicator-lang

### Instalando os drivers da NVIDIA ###
if [[ $instalar_nvidia == "Sim" ]]; then
    echo -e "\nInstalando os drivers da NVIDIA\n"
    comando_1="zypper -n --root $destino refresh -f"
    comando_2="zypper -n --root $destino install -y --download-in-advance --auto-agree-with-licenses nvidia-compute-G06 nvidia-compute-G06-32bit nvidia-compute-utils-G06 nvidia-driver-G06-kmp-default nvidia-drivers-G06 nvidia-gl-G06 nvidia-gl-G06-32bit nvidia-utils-G06 nvidia-video-G06 nvidia-video-G06-32bit"

    tentar "$comando_1 ; $comando_2" $tentivas_maximas

    KERNEL_ATUAL="$(chroot $destino /usr/bin/find /usr/src/ -maxdepth 1 -type d -name 'linux-*-*-obj' | sort -t- -k2,2Vr -k3,3nr | head -n 1)"
    SYSSRC="$KERNEL_ATUAL/x86_64/default/"
    NVIDIA_SRC="/usr/src/kernel-modules/$(chroot $destino /usr/bin/ls /usr/src/kernel-modules/)"

    KERNEL_ATUAL=$KERNEL_ATUAL SYSSRC=$SYSSRC chroot $destino /bin/bash $NVIDIA_SRC/conftest.sh
    KERNEL_ATUAL=$KERNEL_ATUAL SYSSRC=$SYSSRC chroot $destino /usr/bin/make -C $NVIDIA_SRC
    KERNEL_ATUAL=$KERNEL_ATUAL SYSSRC=$SYSSRC chroot $destino /usr/bin/make modules_install -C $NVIDIA_SRC
fi

### Instalando o SUSE Prime e ajustando para não desligar o áudio do HDMI ###
if [[ "$laptop" == [sS] ]]; then
    ### Instalando componentes para melhor experiência com laptops ###
    echo -e "\nInstalando componentes para melhor experiência com laptops\n"
    if [ "$num_gpus" -gt 1 ]; then
        switcheroo_control="switcheroo-control"
    fi
 
    comando_1="zypper -n --root $destino refresh -f"
    comando_2="zypper -n --root $destino install -y --download-in-advance -t pattern laptop"
    comando_3="zypper -n --root $destino install -y --download-in-advance touchegg $switcheroo_control tlpui"

    tentar "$comando_1 ; $comando_2 && $comando_3" $tentivas_maximas

    if [[ $instalar_nvidia == "Sim" ]]; then
        echo -e "\nInstalando o SUSE Prime e ajustando para não desligar o áudio do HDMI\n"
        comando_1="zypper -n --root $destino refresh -f"
        comando_2="zypper -n --root $destino install -y --download-in-advance suse-prime suseprime-appindicator"

        tentar "$comando_1 ; $comando_2" $tentivas_maximas

        echo '# Enable runtime PM for NVIDIA VGA/3D controller devices on driver bind
        ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="auto"
        ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="auto"

        # Disable runtime PM for NVIDIA VGA/3D controller devices on driver unbind
        ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="on"
        ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="on"' > $destino/etc/udev/rules.d/90-nvidia-udev-pm-G05.rules

        # Habilitar controle de energia dinâmico
        echo 'options nvidia NVreg_DynamicPowerManagement=0x02' > $destino/etc/modprobe.d/09-nvidia-dpm.conf

        # Habilitar o SUSE Prime e realizar as configurações necessárias
        chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/prime-select.service /etc/systemd/system/multi-user.target.wants/prime-select.service
        echo "offload" > $destino/etc/prime/boot
        echo "offload" > $destino/etc/prime/current_type
        echo "$iGPU" > $destino/etc/prime/offload_type
        echo "$usuario" > $destino/etc/prime/user
    fi

    # Habilitando o TLP para preservação da bateria
    chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/tlp.service /etc/systemd/system/multi-user.target.wants/tlp.service
    chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/touchegg.service /etc/systemd/system/multi-user.target.wants/touchegg.service

    # Ajustando configurações do TLP
    sed -i '/^/s/^#CPU_SCALING_GOVERNOR_ON_BAT/CPU_SCALING_GOVERNOR_ON_BAT/g' $destino/etc/tlp.conf
    sed -i '/^/s/^#CPU_SCALING_GOVERNOR_ON_AC/CPU_SCALING_GOVERNOR_ON_AC/g' $destino/etc/tlp.conf
    sed -i '/^/s/^#RUNTIME_PM_ON_AC=on/RUNTIME_PM_ON_AC=auto/g' $destino/etc/tlp.conf
    sed -i '/^/s/^#PCIE_ASPM_ON_BAT=default/PCIE_ASPM_ON_BAT=powersupersave/g' $destino/etc/tlp.conf

    # Habilitar o serviço do switcheroo-control
    if [ ! -z "$switcheroo_control" ]; then
        chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/switcheroo-control.service /etc/systemd/system/graphical.target.wants/switcheroo-control.service
    fi
fi

### Criando diretório images ###
mkdir $destino/usr/share/images

### Habilitando serviço de rede ###
echo -e "\nHabilitando serviço de rede\n"
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/NetworkManager.service /etc/systemd/system/network.service
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/NetworkManager.service /etc/systemd/system/multi-user.target.wants/NetworkManager.service
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/NetworkManager-dispatcher.service /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/NetworkManager-wait-online.service /etc/systemd/system/network-online.target.wants/NetworkManager-wait-online.service

### Habilitando Firewalld ###
echo -e "\nHabilitando Firewalld\n"
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/firewalld.service /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/firewalld.service /etc/systemd/system/multi-user.target.wants/firewalld.service

### Habilitando Chronyd ###
echo -e "\nHabilitando Chronyd\n"
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/chronyd.service /etc/systemd/system/multi-user.target.wants/chronyd.service

### Habilitando General Purpose Mouse ###
echo -e "\nHabilitando General Purpose Mouse\n"
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/gpm.service /etc/systemd/system/multi-user.target.wants/gpm.service

### Habilitando Libvirtd ###
echo -e "\nHabilitando Libvirtd\n"
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/libvirtd.service /etc/systemd/system/multi-user.target.wants/libvirtd.service
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/virtlockd.socket /etc/systemd/system/sockets.target.wants/virtlockd.socket
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/virtlogd.socket /etc/systemd/system/sockets.target.wants/virtlogd.socket
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/libvirtd.socket /etc/systemd/system/sockets.target.wants/libvirtd.socket
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/libvirtd-ro.socket /etc/systemd/system/sockets.target.wants/libvirtd-ro.socket

### Habilitando Earlyoom ###
echo -e "\nHabilitando Earlyoom\n"
chroot $destino /usr/bin/ln -s /usr/lib/systemd/system/earlyoom.service /etc/systemd/system/multi-user.target.wants/earlyoom.service

### Desabilitando a política de nomes de interface de rede ###
echo -e "\nDesabilitando a política de nomes de interface de rede\n"
chroot $destino /usr/bin/ln -s /dev/null /etc/systemd/network/99-default.link

### Garantindo o início do nm-applet quando o shell padrão não for o bash ###
cp $destino/usr/share/applications/nm-applet.desktop $destino/etc/xdg/autostart/nm-applet.desktop

### Desabilitando o início automático do applet do FirewallD ###
echo '[Desktop Entry]
Hidden=true' > $destino/etc/xdg/autostart/firewall-applet.desktop

### Desligando o beep do XFCE ###
echo '[Desktop Entry]
Type=Application
Encoding=UTF-8
Name=Bell off
Comment=Desliga o beep do XFCE
Exec=/usr/bin/xset b off
Icon=
Terminal=False' > $destino/etc/xdg/autostart/bell-off.desktop

### Permitindo conexões ao servidor X ###
echo '[Desktop Entry]
Type=Application
Encoding=UTF-8
Name=Distrobox Xhost Allower
Comment=Allows apps running in Distrobox containers to use the local X server.
Exec=bash -c "/usr/bin/xhost +si:localuser:$USER"
Terminal=False' > $destino/etc/xdg/autostart/distrobox-xhost-allower.desktop

### Ajustando o PolicyKit para respeitar o grupo wheel ###
echo "polkit.addAdminRule(function(action, subject) {
    return [\"unix-user:0\", \"unix-group:wheel\"];
});" > $destino/etc/polkit-1/rules.d/00-wheel.rules

chmod +r $destino/etc/polkit-1/rules.d/00-wheel.rules

### Ajustando o nome do computador ###
echo "$nome_computador" > $destino/etc/hostname

### Ajustando idioma e fuso ###
echo "LANG=pt_BR.utf8" > $destino/etc/environment
echo "QT_QPA_PLATFORMTHEME=qt5ct" >> $destino/etc/environment
sed 's/INSTALLED_LANGUAGES=""/INSTALLED_LANGUAGES="pt_BR"/' -i $destino/etc/sysconfig/language
sed 's/ROOT_USES_LANG="ctype"/ROOT_USES_LANG="yes"/' -i $destino/etc/sysconfig/language
echo "LANG=pt_BR.UTF-8" > $destino/etc/locale.conf
echo "LC_ALL=pt_BR.UTF-8" >> $destino/etc/locale.conf
rm $destino/etc/localtime
ln -s /usr/share/zoneinfo/America/Sao_Paulo $destino/etc/localtime

echo "Section \"InputClass\"
        Identifier \"system-keyboard\"
        MatchIsKeyboard \"on\"
        Option \"XkbLayout\" \"br\"
        Option \"XkbModel\" \"pc105+inet\"
        Option \"XkbOptions\" \"terminate:ctrl_alt_bksp\"
EndSection" > $destino/etc/X11/xorg.conf.d/00-keyboard.conf

echo "KEYMAP=br-abnt2
FONT=ter-v22b
FONT_MAP=
FONT_UNIMAP=" > $destino/etc/vconsole.conf

### Ajustando o tema do gerenciador de login ###
echo "[greeter]
background = /usr/share/wallpapers/openSUSEdefault/contents/images/5120x3200.png
user-background = false
theme-name = Adapta-LightGreen-Nokto
indicators = ~host;~spacer;~clock;~spacer;~language;~layout;~session;~a11y;~power;
font-name = Open Sans 16
icon-theme-name = breeze-dark
clock-format = %a, %T
screensaver-timeout = 2
xft-antialias = true" > $destino/etc/lightdm/lightdm-gtk-greeter.conf

### Habilitando cores para algumas aplicações de linha de comando ###
echo 'CLICOLOR=1' >> $destino/etc/environment

### Ajustando permissão para o LightDM funcionar ###
chroot $destino /usr/bin/chown -R lightdm: /var/lib/lightdm

### Adicionando repositório do Flathub ###
chroot $destino /usr/bin/flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

### Limpando pacotes já baixados ###
zypper -n --root $destino clean

### Removendo pacotes desnecessários ###
zypper -n --root $destino remove -y --clean-deps java-11-openjdk java-11-openjdk-headless javapackages-filesystem javapackages-tools busybox-ed hddtemp openssh-askpass xf86-input-keyboard postfix

### Removendo o repositório do openSUSE Leap ###
echo -e "\nRemovendo o repositório do openSUSE Leap\n"
zypper --root $destino removerepo "Open Source Software Leap"

### Atualizando os pacotes órfãos e garantindo ###
### que as bibliotecas gráficas vêm do Packman ###
echo -e "\nAtualizando pacotes obsoletos\n"
pacotes_orfaos="$(zypper -n --root $destino search -s --installed-only -t package | grep -E "\(.*\)" | awk '{print $3}' | grep -v "wpa_supplicant" | tr '\n' ' ')"

comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino install -y --download-in-advance --force --repo \"Open Source Software\" $pacotes_orfaos"
comando_3="zypper -n --root $destino dist-upgrade -y --download-in-advance --from \"Packman Repository\" --allow-vendor-change"
comando_4="zypper -n --root $destino dist-upgrade -y --download-in-advance"

tentar "$comando_1 ; $comando_2 && $comando_3 && $comando_4" $tentivas_maximas

### Ajustando para que o zypper não mude o fornecedor de pacotes por padrão ###
echo -e "\nAjustando para que o zypper não mude o fornecedor de pacotes por padrão\n"
sed -i 's/solver.dupAllowVendorChange = true/solver.dupAllowVendorChange = false/' $destino/etc/zypp/zypp.conf

### Ajustando o tempo de atualização automática dos repositórios para 7 dias ###
echo -e "\nAjustando o tempo de atualização automática dos repositórios para 7 dias\n"
sed -i '/# repo.refresh.delay = 10/a repo.refresh.delay = 10080' $destino/etc/zypp/zypp.conf

### Instalando o tema Adapta ###
echo -e "\nInstalando o tema Adpata\n"
comando_1="wget -q --show-progress https://github.com/jpmsb/preparando-computador-para-engenharia-de-tele/raw/main/compactados/tema-adapta.tar.gz -O /tmp/adapta.tar.gz"

tentar "$comando_1" $tentivas_maximas

mkdir -p $destino/usr/share/themes/Adapta
tar -xf /tmp/adapta.tar.gz -C $destino/usr/share/themes

### Habilitando a tela de boas vindas ###
cp $destino/usr/share/applications/org.opensuse.opensuse_welcome.desktop $destino/etc/xdg/autostart/org.opensuse.opensuse_welcome.desktop

### Instalando a fonte Noto Mono Nerd Font ###
echo -e "\nInstalando a fonte Noto Mono Nerd Font\n"
comando_1="wget -q --show-progress https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Noto/Mono/NotoMonoNerdFontMono-Regular.ttf -O $destino/usr/share/fonts/NotoMonoNerdFontMono-Regular.ttf"

tentar "$comando_1" $tentivas_maximas

chroot $destino /usr/bin/fc-cache -r

### Instalando um skel ###
echo -e "\nInstalando um skel\n"
comando_1="wget -q --show-progress https://github.com/jpmsb/preparando-computador-para-engenharia-de-tele/raw/main/compactados/skel.tar.xz -O /tmp/skel.tar.xz"

tentar "$comando_1" $tentivas_maximas

tar -xf /tmp/skel.tar.xz -C $destino/etc/skel

### Rotina para a instalação do Gradle ###
echo -e "\nObtendo rotina que facilita a instalação do Gradle\n"
comando_1="wget -q --show-progress https://github.com/jpmsb/preparando-computador-para-engenharia-de-tele/raw/main/scripts-auxiliares/instalar-gradle -O $destino/usr/local/bin/instalar-gradle"

tentar "$comando_1" $tentivas_maximas

chmod +x $destino/usr/local/bin/instalar-gradle

### Correção do tema de cores do nomacs - Image Lounge ###
mkdir -p $destino/etc/skel/.config/nomacs
echo '[DisplaySettings]
bgColorNoMacsRGBA=4281545523
bgColorWidgetRGBA=2852126720
fontColorRGBA=4292730333
highlightColorRGBA=4278233855
iconColorRGBA=4292730333
themeName312=Dark-Theme.css
tpPattern=true' > "$destino/etc/skel/.config/nomacs/Image Lounge.conf"

### Tema de cores Breeze Dark para o Okular ###
echo '[UiSettings]
ColorScheme=Breeze Dark' > $destino/etc/skel/.config/okularrc

### Definindo configurações para o xfce4-terminal ###
echo '<?xml version="1.0" encoding="UTF-8"?>

<channel name="xfce4-terminal" version="1.0">
  <property name="color-palette" type="string" value="rgb(0,0,0);rgb(170,0,0);rgb(0,170,0);rgb(246,211,45);rgb(62,125,205);rgb(170,0,170);rgb(0,170,170);rgb(170,170,170);rgb(85,85,85);rgb(255,85,85);rgb(85,255,85);rgb(255,255,85);rgb(85,85,255);rgb(255,85,255);rgb(85,255,255);rgb(255,255,255)"/>
  <property name="font-name" type="string" value="NotoMono Nerd Font Mono 12"/>
  <property name="scrolling-unlimited" type="bool" value="true"/>
  <property name="run-custom-command" type="bool" value="true"/>
  <property name="custom-command" type="string" value="/usr/bin/fish"/>
</channel>' > $destino/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-terminal.xml

### Instalando o pacote de ícones Tela (modo standard) ###
echo -e "\nInstalando o tema de ícones Tela\n"
comando_1="wget -q --show-progress https://github.com/vinceliuice/Tela-icon-theme/archive/refs/tags/2022-02-21.tar.gz -O /tmp/Tela-icon-theme.tar.gz"

tentar "$comando_1" $tentivas_maximas

tar -xf /tmp/Tela-icon-theme.tar.gz -C /tmp
bash /tmp/Tela-icon-theme-2022-02-21/install.sh -d $destino/usr/share/icons > /dev/null

sed -i '/<rect style="fill:currentColor;" class="ColorScheme-Text" x="5" y="6" width="2" height="3" rx="0" ry="0"\/>/d; /<rect style="fill:currentColor;" class="ColorScheme-Text" x="9" y="6" width="2" height="3" rx="0" ry="0"\/>/d' $destino/usr/share/icons/Tela-dark/16/devices/network-wired-activated.svg

### Ajustando o Package Update Indicator para ###
### utilizar um script customizado            ###
mkdir -p $destino/etc/skel/.config/package-update-indicator/
echo "[General]
refresh-interval=43200
update-command='/usr/local/bin/atualizar-sistema'" > $destino/etc/skel/.config/package-update-indicator/package-update-indicator.conf

### Script para atualizar o sistema ###
echo -e "\nInstalando o script para atualizar o sistema\n"
comando_1="wget -q --show-progress https://raw.githubusercontent.com/jpmsb/preparando-computador-para-engenharia-de-tele/main/scripts-auxiliares/atualizar-sistema -O $destino/usr/local/bin/atualizar-sistema"

tentar "$comando_1" $tentivas_maximas

chmod +x $destino/usr/local/bin/atualizar-sistema

### Criando usuário com poder sudo ###
echo -e "\nCriando usuário \"$usuario\" com poder sudo\n"
useradd --root $destino -m --groups libvirt,wheel,users,video,dialout -c "$nome_completo" --shell /bin/bash $usuario
echo "$usuario:$senha" | chpasswd --root $destino
rm -rf $destino/home/$usuario/bin

### Adicionando caminhos extras de binários no FISH ###
echo 'for i in /bin /sbin /usr/local/sbin /usr/local/bin
    if not contains $i $PATH
        set PATH $PATH $i
    end 
end

if not contains $HOME/.local/bin $PATH
    set PATH $HOME/.local/bin $PATH
end' > $destino/etc/fish/conf.d/extra_paths.fish

### Adicionando caminhos extras de binários no BASH ###
echo 'new_paths=("/bin" "/sbin" "/usr/local/sbin" "/usr/local/bin")

for new_path in "${new_paths[@]}"
do  
    if [[ ":$PATH:" != *":$new_path:"* ]]; then
        export PATH="$PATH:$new_path"
    fi
done

if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi' > $destino/etc/profile.d/extra_paths.sh

### Definindo o interpretador de comandos FISH na variável SHELL ###
echo 'export SHELL=/usr/bin/fish' > $destino/etc/profile.d/default_shell.sh
echo 'SHELL=/usr/bin/fish' >> $destino/etc/environment

### Criando o cache do tealdeer ###
chroot $destino /usr/bin/su -c "/usr/bin/tldr --update" -s /bin/bash $usuario

### Ajustando o tema dos aplicativos do Gnome ###
echo "[org.gnome.desktop.interface]
color-scheme='prefer-dark'" > $destino/usr/share/glib-2.0/schemas/10_org.gnome.desktop.interface.gschema.override
chroot $destino /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas

### Loja Gnome Software deve preferir o repositório local ao invés de Flatpak ###
echo "[org.gnome.software]
packaging-format-preference = [ 'package', 'flatpak' ]" > $destino/usr/share/glib-2.0/schemas/20_org.gnome.software-jpmsb.gschema.override
chroot $destino /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas

### Definindo a senha do root ###
echo -e "\nDefinindo a senha do usuário root\n"
echo "root:$senha_root" | chpasswd --root $destino

### Ajustando as permissões dos diretórios do PolicyKit ###
chroot $destino /usr/bin/chown -R root:root /usr/share/polkit-1/
chroot $destino /usr/bin/chown polkitd:root /usr/share/polkit-1/rules.d
chroot $destino /usr/bin/chown polkitd:root /usr/share/polkit-1/rules.d/50-default.rules
chroot $destino /usr/bin/chown polkitd:root /etc/polkit-1/rules.d

### Ajustando a zona padrão do Firewalld para 'trusted' ###
chroot $destino /usr/bin/firewall-offline-cmd --set-default-zone=trusted

### Desmontando diretórios ###
desmontar_tudo $destino

echo -e "${verde}\n\nTudo pronto!! Digite \"sudo reboot\" para reiniciar o seu computador.${normal}"
