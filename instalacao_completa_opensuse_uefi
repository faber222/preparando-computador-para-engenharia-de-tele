#!/bin/bash

### Funções auxiliares ###
desmontar_tudo(){
    local destino=$1

    ### Desmontando diretórios ###
    umount $destino/sys/firmware/efi/efivars
    umount $destino/boot/efi
    umount $destino/dev
    umount $destino/proc
    umount $destino/sys
    umount $destino
}

tentar(){
    local comando="$1"
    local tentativas=$2
    local tentativa_atual=0

    until [ $tentativa_atual -ge $tentativas ]; do
        bash -c "$comando" && break

        echo -e "\nOcorreu um erro, tentando novamente...\n"
        tentativa_atual=$((tentativa_atual + 1))
        sleep 1
    done

    if [ $tentativa_atual -eq $tentativas ]; then
        echo -e "\nApós $tentativas tentativas, o comando de instalação finalizou com erro."
        echo "Verifique se você está conectado a Internet e se há espaço suficiente na partição onde o sistema será instalado."
        echo -e "Você pode tentar executar esse script novamente para reiniciar o processo de instalação.\n"

        desmontar_tudo $destino
        exit 1
    fi
}

ajuda(){
    echo -e "Seu comando não possui todos os argumentos necessários. Veja o uso e exemplo abaixo:\n"
    echo -e "Uso:\n"
    echo "    ./$0 \"partição onde o sistema será instalado\" \"partição EFI\" \"nome de usuário\" \"seu nome completo\""
    echo -e "\nEXEMPLO:\n"
    echo "    ./$0 /mnt /dev/sda1 joao \"João Pedro\""
    echo
}

### Mensagem de boas vindas ###
echo -e "\nOlá!! Este é o script de instalação completa do openSUSE Tumbleweed! Nesse tipo de instalação, serão instalados os pacotes principais e suas dependências, bem como pacotes sugeridos, ou seja, pacotes que não são necessários para o funcionamento das aplicações que serão instaladas mas que podem adicionar recurso extra. Um exemplo disso são os pacotes de tradução. Nesse script, os pacotes de tradução serão instalados explicitamente para evitar que alguma tradução acabe faltando."
echo -e "\nNo mais, aproveite!!"

### Variáveis preparatórias ###
destino=/mnt
tentivas_maximas=5

particao_raiz=$1
particao_EFI=$2
usuario=$3
senha=$4
nome_completo=$5
nome_computador=$6
instalar_nvidia=$7
laptop=$8

### Interação com o usuário para coletar os dados iniciais ###
# ajuda
if [ -z "$particao_raiz" ]; then
    read -p "Partição onde o sistema será instalado [ex.: /dev/sda2]: " particao_raiz
else
    echo "Partição onde o sistema será instalado [ex.: /dev/sda2]: $particao_raiz"
fi

if [ -z "$particao_EFI" ]; then
    read -p "Partição de inicialização EFI [ex.: /dev/sda1]: " particao_EFI
else
    echo "Partição de inicialização EFI [ex.: /dev/sda1]: $particao_EFI"
fi

echo -e "\n### Criação do seu usuário ###"

if [ -z "$usuario" ]; then
    read -p "Nome de usuário a ser criado: [ex.: joao]: " usuario
else
    echo "Nome de usuário a ser criado: [ex.: joao]: $usuario"
fi

if [ -z "$senha" ]; then
    while [[ "$senha" != "$senha_redigitada" ]] || [[ -z "$senha" ]]
    do
        read -sp "Senha para esse novo usuário (ficará oculta enquanto digitar): " senha
        echo
        read -sp "Confirme a senha: " senha_redigitada
        echo

        if [ "$senha" != "$senha_redigitada" ]; then
            echo -e "\nAs senhas digitadas são diferentes! Tente novamente.\n"
        fi
    done
else
    echo "Senha para esse novo usuário: Já definida!"
fi

if [ -z "$nome_completo" ]; then
    read -p "Nome completo para o novo usuário [ex.: João Pedro]: " nome_completo
else
    echo "Nome completo para o novo usuário [ex.: João Pedro]: $nome_completo"
fi

if [ -z "$nome_computador" ]; then
    read -p "Nome do computador (não pode conter espaços) [ex.: meupc]: " nome_computador
else
    echo "Nome do computador (não pode conter espaços) [ex.: meupc]: $nome_computador"
fi

if [ -z "$instalar_nvidia" ] || [[ "$instalar_nvidia" != [sSnN] ]]; then
    while [[ "$instalar_nvidia" != [sSnN] ]]; do
        read -p "Deseja instalar o suporte para placas de vídeo da NVIDIA? [S/N] " instalar_nvidia
    done
else
    echo "Deseja instalar o suporte para placas de vídeo da NVIDIA? [S/N] $instalar_nvidia"
fi

if [ -z "$laptop" ] || [[ "$laptop" != [sSnN] ]]; then
    while [[ "$laptop" != [sSnN] ]]; do
        read -p "A instalação será realizada em um notebook? [S/N] " laptop
    done
else
    echo "A instalação será realizada em um notebook? [S/N] $laptop"
fi

echo -e "\nInformações coletadas:"
echo " - Partição onde o sistema será instalado: $particao_raiz"
echo " - Partição de inicialização EFI: $particao_EFI"
echo " - Nome de usuário a ser criado: $usuario"
echo " - Nome completo para o novo usuário: $nome_completo"
echo " - Nome do computador: $nome_computador"
echo -n " - Suporte para placas da NVIDIA: "

if [[ "$instalar_nvidia" == [sS] ]]; then
    echo "Sim"
else
    echo "Não"
fi

echo -n " - Instalação em notebook: "

if [[ "$laptop" == [sS] ]]; then
    echo "Sim"
else
    echo "Não"
fi

echo -e "\n"

while [[ "$resposta" != [sSnN] ]]; do
    read -p "As informações acima estão corretas? [S/N] " resposta
done

if [[ "$resposta" == [nN] ]]; then
    echo -e "\nA instalação foi cancelada. Execute-a novamente para recomeçar."
    exit 0
fi

### Montando a partição onde o sistema será instalado ###
mount $particao_raiz $destino

### Instalação do sistema base ###
comando_1="zypper refresh -f"
comando_2="zypper -n --installroot $destino install -y zypper-needs-restarting systemd-lang systemd-container ca-certificates ca-certificates-mozilla curl gawk grep-lang sed-lang tar-lang xz-lang gzip procps-lang procps systemd-presets-branding-openSUSE"
comando_3="zypper -n --installroot $destino install -y -t pattern base"

tentar "$comando_1 ; $comando_2 ; $comando_3" $tentivas_maximas

### Bloqueando pacote problemático do ALSA ###
zypper -n --root $destino remove -u -y alsa-ucm-conf
zypper --root $destino addlock alsa-ucm-conf

### Montando diretórios adicionais ###
mount --bind /sys $destino/sys
mount --bind /proc $destino/proc
mount --bind /dev $destino/dev
mkdir $destino/boot/efi

### Atualizando os certificados SSL ###
chroot $destino update-ca-certificates

### Adicionando os repositórios necessários ###
echo '[Open_Source_Software]
name=Open Source Software
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/tumbleweed/repo/oss/
path=/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/Open_Source_Software.repo

echo '[Non_Open_Source_Software]
name=Non Open Source Software
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/tumbleweed/repo/non-oss/
path=/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/Non_Open_Source_Software.repo

echo '[Update]
name=Update
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/update/tumbleweed/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/Update.repo

echo "[Emulators]
name=Emulators
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/repositories/Emulators/openSUSE_Tumbleweed/
path=/
type=rpm-md
priority=99
keeppackages=0" > $destino/etc/zypp/repos.d/Emulators.repo

echo '[Hardware_SDR]
name=Hardware SDR
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/hardware:/sdr/openSUSE_Tumbleweed/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/Hardware_SDR.repo

echo '[Hardware]
name=Hardware
enabled=1
autorefresh=1
baseurl=http://download.opensuse.org/repositories/hardware/openSUSE_Tumbleweed/
type=rpm-md
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/hardware/openSUSE_Tumbleweed/repodata/repomd.xml.key
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/Hardware.repo

echo '[Education]
name=Education
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/Education/openSUSE_Tumbleweed/
path=/
type=rpm-md
keeppackages=0' > $destino/etc/zypp/repos.d/Education.repo

echo '[Security_Logging]
name=Security Logging
type=rpm-md
baseurl=https://download.opensuse.org/repositories/security:/logging/openSUSE_Tumbleweed/
gpgcheck=1
gpgkey=https://download.opensuse.org/repositories/security:/logging/openSUSE_Tumbleweed/repodata/repomd.xml.key
enabled=1
keeppackages=0' > $destino/etc/zypp/repos.d/Security_logging.repo

echo '[Games]
name=Games
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/games/openSUSE_Tumbleweed/
type=rpm-md
gpgcheck=1
keeppackages=0' > $destino/etc/zypp/repos.d/Games.repo

echo '[Game_Tools]
name=Game Tools
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/games:/tools/openSUSE_Tumbleweed/
type=rpm-md
gpgcheck=1
keeppackages=0' > $destino/etc/zypp/repos.d/Games_Tools.repo

echo '[Multimedia_Proaudio]
name=Multimedia Proaudio
baseurl=https://download.opensuse.org/repositories/multimedia:/proaudio/openSUSE_Tumbleweed/
enabled=1
type=rpm-md
gpgcheck=1
gpgkey=https://download.opensuse.org/repositories/multimedia:/proaudio/openSUSE_Tumbleweed/repodata/repomd.xml.key
autorefresh=1' > $destino/etc/zypp/repos.d/Multimedia_Proaudio.repo

echo '[Graphics]
name=Graphics
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/graphics/openSUSE_Tumbleweed/
type=rpm-md
gpgcheck=1
keeppackages=0' > $destino/etc/zypp/repos.d/Graphics.repo

echo '[Xorg]
name=Xorg
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/X11:/XOrg/openSUSE_Tumbleweed/
type=rpm-md
gpgcheck=1
keeppackages=0' > $destino/etc/zypp/repos.d/Xorg.repo

if [[ $instalar_nvidia = [sS] ]]; then
    echo -e '[NVIDIA]\nname=NVIDIA\nenabled=1\nautorefresh=1\nbaseurl=https://download.nvidia.com/opensuse/tumbleweed\ntype=rpm-md\nkeeppackages=0' > $destino/etc/zypp/repos.d/NVIDIA.repo
fi

echo '[Packman_Repository]
name=Packman Repository
enabled=1
autorefresh=1
baseurl=http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/
path=/
type=rpm-md
priority=95
keeppackages=0' > $destino/etc/zypp/repos.d/packman.repo

echo '[VSCode]
name=VSCode
enabled=1
autorefresh=1
baseurl=https://packages.microsoft.com/yumrepos/vscode
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/vscode.repo

echo '[X2go]
name=X2Go
enabled=1
autorefresh=1
baseurl=https://download.opensuse.org/repositories/X11:/RemoteDesktop:/x2go/openSUSE_Tumbleweed
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/X2Go.repo

echo '[libdvdcss]
name=libdvdcss
enabled=1
autorefresh=1
baseurl=http://opensuse-guide.org/repo/openSUSE_Tumbleweed/
path=/
type=rpm-md
priority=99
keeppackages=0' > $destino/etc/zypp/repos.d/libdvdcss.repo

echo '[google-chrome]
name=google-chrome
enabled=1
autorefresh=1
baseurl=https://dl.google.com/linux/chrome/rpm/stable/x86_64
gpgcheck=1
gpgkey=https://dl.google.com/linux/linux_signing_key.pub
type=rpm-md
keeppackages=0' > $destino/etc/zypp/repos.d/google-chrome.repo

echo '[teamviewer]
name=TeamViewer - $basearch
baseurl=https://linux.teamviewer.com/yum/stable/main/binary-$basearch/
gpgkey=https://linux.teamviewer.com/pubkey/currentkey.asc
gpgcheck=1
repo_gpgcheck=1
enabled=1
type=rpm-md' > $destino/etc/zypp/repos.d/teamviewer.repo

echo '[geogebra]
name=geogebra
enabled=1
autorefresh=1
baseurl=http://www.geogebra.net/linux/rpm/x86_64
type=rpm-md
repo_gpgcheck=0
keeppackages=0' > $destino/etc/zypp/repos.d/geogebra.repo

echo '[AnyDesk]
name=AnyDesk
enabled=1
autorefresh=1
baseurl=http://rpm.anydesk.com/opensuse/x86_64/
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://keys.anydesk.com/repos/RPM-GPG-KEY' > $destino/etc/zypp/repos.d/anydesk.repo


### Ajustando o servidor de DNS ###
echo "nameserver 8.8.8.8" > $destino/etc/resolv.conf

### Importando a chave do repositório do Visual Studio Code ###
comando_1="chroot $destino rpm --import https://packages.microsoft.com/keys/microsoft.asc"

tentar "$comando_1" $tentivas_maximas

### Importando a chave do repositório do Geogebra ###
comando_1="chroot $destino rpm --import https://static.geogebra.org/linux/office@geogebra.org.gpg.key"

tentar "$comando_1" $tentivas_maximas

### Atualizando lista de pacotes ###
comando_1="zypper -n --root $destino --gpg-auto-import-keys refresh -f"

tentar "$comando_1" $tentivas_maximas

### Aplicando as atualizações ###
comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino dist-upgrade -y --download-in-advance --allow-vendor-change --no-recommends"

tentar "$comando_1 ; $comando_2" $tentivas_maximas

### Instalação do restante do sistema base ###
comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino install -y --download-in-advance efitools efivar fwupd-efi vim mokutil kernel-default kernel-default-devel NetworkManager-lang sudo htop grub2-branding-openSUSE grub2-x86_64-efi-extras gpm nload xorg-x11-driver-video xorg-x11-server-extra pipewire-lang pipewire-pulseaudio pipewire-alsa pipewire-aptx pipewire-module-x11-0_3 flatpak git ffmpeg-6 libvulkan1 plymouth-lang unzip zip 7zip bzip2 unrar fish yt-dlp-fish-completion tealdeer-fish-completion tealdeer yt-dlp btop NetworkManager-bluetooth kernel-firmware-all yast2 yast2-bootloader yast2-control-center yast2-sudo yast2-trans-pt_BR yast2-sysconfig yast2-update yast2-services-manager yast2-security yast2-online-update yast2-online-update-configuration yast2-online-update-frontend yast2-installation xkeyboard-config-lang xorg-x11-driver-input xinput xf86-input-joystick wget-lang glibc-locale glibc-lang glib-networking-lang glib2-lang chrony xorg-x11-fonts-core adobe-sourcecodepro-fonts dejavu-fonts mkfontscale myspell-dictionaries myspell-en myspell-en_US myspell-lightproof-en myspell-lightproof-pt_BR myspell-pt_BR apparmor-utils-lang apparmor-parser-lang apparmor-abstractions which google-opensans-fonts terminus-bitmap-fonts firewalld-lang plymouth-dracut plymouth-theme-opensuse-beat yast2-firewall yast2-ntp-client tree neofetch libvirt avahi sensors scout-command-not-found btop rpmrebuild gcc-c++ gdb gdbm-lang fuse fuse-overlayfs bat bat-extras bat-fish-completion man-pages-pt_BR translation-update-pt_BR make-lang accountsservice-lang dialog-lang net-tools-lang psmisc-lang mlocate-lang findutils-lang exo-lang diffutils-lang cryptsetup-lang cpio-lang coreutils-lang bison-lang udisks2-lang ntfs-3g ntfsprogs-extra libfsntfs-tools ntfsprogs wireless-regdb syslog-ng android-tools android-udev-rules earlyoom net-tools-deprecated v4l2loopback-utils v4l2loopback-kmp-default v4l2loopback-autoload whois nmap tcpdump netavark qemu-kvm libvirt-daemon-qemu qemu-linux-user qemu-linux-user libvirt-daemon-qemu ncdu kexec-tools python311-glances rclone opi rsync libguestfs libguestfs-rsync libguestfs0 libguestfs-rescue update-bootloader-rpm-macros patterns-base-bootloader fwupd-lang susepaste ntfs-3g ntfsprogs-extra libfsntfs1 libfsntfs-tools nvtop"

tentar "$comando_1 ; $comando_2" $tentivas_maximas

### Instalação do grub ###
mount $particao_EFI $destino/boot/efi
chroot $destino mount -t efivarfs efivarfs /sys/firmware/efi/efivars
chroot $destino grub2-install
chroot $destino dracut -vf --regenerate-all

sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=""/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash security=apparmor loglevel=3 nosimplefb=1"/' $destino/etc/default/grub
echo "GRUB_DISABLE_OS_PROBER=\"false\"" >> $destino/etc/default/grub

chroot $destino grub2-mkconfig -o /boot/grub2/grub.cfg

### Ajustando o tema de inialização do sistema ###
chroot $destino plymouth-set-default-theme opensuse-beat -R
chroot $destino dracut -vf --regenerate-all

### Ajustando os pontos de montagem no fstab ###
echo "$(/usr/sbin/blkid | grep "$particao_raiz" | awk '{print $2}') / ext4 defaults 0 0" > $destino/etc/fstab
echo "$(/usr/sbin/blkid | grep "$particao_EFI" | awk '{print $2}') /boot/efi vfat utf8 0 0" >> $destino/etc/fstab

### Removendo pacotes conflitantes ###
zypper -n --root $destino remove -y xscreensaver

### Instalando componentes gráficos e da área de trabalho ###
comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino install -y --download-in-advance lightdm-lang lightdm-gtk-greeter-lang lightdm-gtk-greeter-settings-lang xfce4-panel-lang xfce4-panel-profiles xfce4-panel-restore-defaults xfce4-power-manager-lang xfce4-pulseaudio-plugin-lang pavucontrol-lang xfce4-screensaver xscreensaver-data-extra xfce4-screenshooter-lang xfce4-session-lang xfce4-settings-lang xfce4-terminal-lang xfce4-datetime-plugin-lang xfce4-genmon-plugin-lang xfce4-kbdleds-plugin-lang xfce4-notifyd-lang xfce4-panel-lang xfce4-pulseaudio-plugin-lang xfce4-systemload-plugin-lang okular-lang ristretto-lang vlc-lang vlc-codecs vlc-codec-gstreamer gstreamer-plugins-ugly-codecs gstreamer-plugins-bad-codecs libavcodec56 libavcodec57 gparted-lang pluma-lang engrampa-lang libreoffice libreoffice-branding-openSUSE libreoffice-l10n-pt_BR libreoffice-l10n-en metatheme-adapta-common gtk3-metatheme-adapta gtk4-metatheme-adapta xfce4-notifyd-theme-adapta xfwm4-lang xfwm4-theme-adapta MozillaFirefox MozillaFirefox-branding-openSUSE MozillaFirefox-translations-common MozillaFirefox-translations-other gnome-calculator-lang kcolorchooser-lang gnome-disk-utility-lang virt-manager qt5ct kolourpaint-lang blueman-lang bluez NetworkManager-applet-lang NetworkManager-connection-editor baobab-lang thunar-lang thunar-sendto-blueman thunar-plugin-media-tags-lang thunar-plugin-shares-lang thunar-volman-branding-openSUSE thunar-volman-lang thunar-plugin-archive-lang thunar-font-manager xfdesktop-lang libreoffice-branding-openSUSE libreoffice-calc libreoffice-draw libreoffice-filters-optional libreoffice-gnome libreoffice-gtk3 libreoffice-icon-themes libreoffice-impress libreoffice-l10n-en libreoffice-l10n-pt_BR libreoffice-mailmerge libreoffice-math libreoffice-pyuno libreoffice-share-linker libreoffice-writer polkit-gnome-lang libgnomesu0 xdg-desktop-portal-gtk-lang xdg-desktop-portal-lang xfce4-settings-color xfce4-sensors-plugin-lang xfce4-battery-plugin-lang xfce4-appfinder-lang xfce4-xkb-plugin-lang xfce4-weather-plugin-lang yast2-theme-breeze breeze5-icons opensuse-welcome-lang gvfs-lang libqt5-qtxmlpatterns-imports libQt5WebChannel5-imports vlc-qt vlc tumbler tumbler-lang tumbler-webp-thumbnailer sox transmission-gtk-lang libva-utils xclip xclipboard libgnomesu-lang fontconfig-lang gtk2-lang gtk3-lang gsettings-desktop-schemas-lang gstreamer-lang gstreamer-plugins-bad-lang gstreamer-plugins-base-lang gstreamer-plugins-ugly-lang xfce4-docklike-plugin xfce4-whiskermenu-plugin-lang xfce4-panel-plugin-indicator-lang upower-lang zenity-lang gdk-pixbuf-lang colord-lang xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE firewall-config xkill mugshot yast2-usbauth yast2-update-FACTORY yast2-testsuite yast2-multipath yast2-devtools autoyast2 yast2-installation-control yast2-configuration-management yast2-support patterns-yast-yast2_desktop patterns-yast-yast2_basis yast2-alternatives yast2-tune yast2-kdump yast2-apparmor yast2-journal libdvdcss2 qsynth-lang gstreamer-plugins-bad-fluidsynth fluidsynth libvulkan_intel libvulkan_radeon simplescreenrecorder google-noto-sans-cjk-fonts simple-scan-lang libgtkglext-x11-1_0-0 xdotool PackageKit-lang gnome-packagekit-lang gnome-packagekit-extras package-update-indicator-lang firewall-applet firewall-config xhost susepaste-screenshot libqt5-qtimageformats"

tentar "$comando_1 ; $comando_2" $tentivas_maximas

### Instalando o Visual Studio Code ###
comando_1="zypper -n --root $destino refresh -f"
comando_2="zypper -n --root $destino install -y --download-in-advance code"

tentar "$comando_1 ; $comando_2" $tentivas_maximas

### Instalando os drivers da NVIDIA ###
if [[ $instalar_nvidia == [sS] ]]; then
    comando_1="zypper -n --root $destino refresh -f"
    comando_2="zypper -n --root $destino install -y --download-in-advance nvidia-compute-G06 nvidia-compute-G06-32bit nvidia-compute-utils-G06 nvidia-driver-G06-kmp-default nvidia-drivers-G06 nvidia-gl-G06 nvidia-gl-G06-32bit nvidia-utils-G06 nvidia-video-G06 nvidia-video-G06-32bit"

    tentar "$comando_1 ; $comando_2" $tentivas_maximas
fi

### Instalando o SUSE Prime e ajustando para não desligar o áudio do HDMI ###
if [[ "$laptop" == [sS] ]]; then
    ### Instalando componentes para melhor experiência com laptops ###
    comando_1="zypper -n --root $destino refresh -f"
    comando_2="zypper -n --root $destino install -y --download-in-advance -t pattern laptop"
    
    tentar "$comando_1 ; $comando_2" $tentivas_maximas

    if [[ $instalar_nvidia == [sS] ]]; then
        comando_1="zypper -n --root $destino refresh -f"
        comando_2="zypper -n --root $destino install -y --download-in-advance suse-prime suseprime-appindicator"

        tentar "$comando_1 ; $comando_2" $tentivas_maximas

        echo '# Enable runtime PM for NVIDIA VGA/3D controller devices on driver bind
        ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="auto"
        ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="auto"
        
        # Disable runtime PM for NVIDIA VGA/3D controller devices on driver unbind
        ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="on"
        ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="on"' > $destino/etc/udev/rules.d/90-nvidia-udev-pm-G05.rules
    fi
fi

### Criando diretório images ###
mkdir $destino/usr/share/images

### Criando grupos necessários ###
groupadd --root $destino --system mail
groupadd --root $destino --system sudo
groupadd --root $destino --system wheel

### Habilitando serviço de rede ###
chroot $destino ln -s /usr/lib/systemd/system/NetworkManager.service /etc/systemd/system/network.service
chroot $destino ln -s /usr/lib/systemd/system/NetworkManager.service /etc/systemd/system/multi-user.target.wants/NetworkManager.service
chroot $destino ln -s /usr/lib/systemd/system/NetworkManager-dispatcher.service /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service
chroot $destino ln -s /usr/lib/systemd/system/NetworkManager-wait-online.service /etc/systemd/system/network-online.target.wants/NetworkManager-wait-online.service

### Habilitando Firewalld ###
chroot $destino ln -s /usr/lib/systemd/system/firewalld.service /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service
chroot $destino ln -s /usr/lib/systemd/system/firewalld.service /etc/systemd/system/multi-user.target.wants/firewalld.service

### Habilitando Chronyd ###
chroot $destino ln -s /usr/lib/systemd/system/chronyd.service /etc/systemd/system/multi-user.target.wants/chronyd.service

### Habilitando General Purpose Mouse ###
chroot $destino ln -s /usr/lib/systemd/system/gpm.service /etc/systemd/system/multi-user.target.wants/gpm.service

### Habilitando Libvirtd ###
chroot $destino ln -s /usr/lib/systemd/system/libvirtd.service /etc/systemd/system/multi-user.target.wants/libvirtd.service
chroot $destino ln -s /usr/lib/systemd/system/virtlockd.socket /etc/systemd/system/sockets.target.wants/virtlockd.socket
chroot $destino ln -s /usr/lib/systemd/system/virtlogd.socket /etc/systemd/system/sockets.target.wants/virtlogd.socket
chroot $destino ln -s /usr/lib/systemd/system/libvirtd.socket /etc/systemd/system/sockets.target.wants/libvirtd.socket
chroot $destino ln -s /usr/lib/systemd/system/libvirtd-ro.socket /etc/systemd/system/sockets.target.wants/libvirtd-ro.socket

### Habilitando Earlyoom ###
chroot $destino ln -s /usr/lib/systemd/system/earlyoom.service /etc/systemd/system/multi-user.target.wants/earlyoom.service

### Ajustando o sudo para respeitar o grupo wheel ###
sed -e '/Defaults targetpw/ s/^#*/# /' -i $destino/etc/sudoers
echo "# Allow members of group wheel to execute any command
%wheel ALL=(ALL) ALL" > $destino/etc/sudoers.d/wheel-users

echo "polkit.addAdminRule(function(action, subject) {
    return [\"unix-user:0\", \"unix-group:wheel\"];
});" > $destino/etc/polkit-1/rules.d/00-wheel.rules

chmod +r $destino/etc/polkit-1/rules.d/00-wheel.rules

### Criando entrada no boot ###
# chroot /mnt efibootmgr -c -d ${particao_EFI//[0-9]/} -p ${particao_EFI: -1} -L "openSUSE" -l '\EFI\opensuse\grubx64.efi'

### Ajustando o nome do computador ###
echo "$nome_computador" > $destino/etc/hostname

### Ajustando idioma e fuso ###
echo "LANG=pt_BR.utf8" > $destino/etc/environment
echo "QT_QPA_PLATFORMTHEME=qt5ct" >> $destino/etc/environment
sed 's/INSTALLED_LANGUAGES=""/INSTALLED_LANGUAGES="pt_BR"/' -i $destino/etc/sysconfig/language
echo "LANG=pt_BR.UTF-8" > $destino/etc/locale.conf
echo "LC_ALL=pt_BR.UTF-8" >> $destino/etc/locale.conf
rm $destino/etc/localtime
ln -s /usr/share/zoneinfo/America/Sao_Paulo $destino/etc/localtime

echo "Section \"InputClass\"
        Identifier \"system-keyboard\"
        MatchIsKeyboard \"on\"
        Option \"XkbLayout\" \"br\"
        Option \"XkbModel\" \"pc105+inet\"
        Option \"XkbOptions\" \"terminate:ctrl_alt_bksp\"
EndSection" > $destino/etc/X11/xorg.conf.d/00-keyboard.conf

echo "KEYMAP=br-abnt2
FONT=ter-v22b
FONT_MAP=
FONT_UNIMAP=" > $destino/etc/vconsole.conf

### Ajustando o tema do gerenciador de login ###
echo "[greeter]
background = /usr/share/wallpapers/openSUSEdefault/contents/images/1600x1200.jpg
theme-name = Adapta-LightGreen-Nokto
indicators = ~host;~spacer;~clock;~spacer;~language;~layout;~session;~a11y;~power;
font-name = Open Sans 16
icon-theme-name = breeze-dark
clock-format = %a, %T
screensaver-timeout = 2
xft-antialias = true" > $destino/etc/lightdm/lightdm-gtk-greeter.conf

### Ajustando permissão para o LightDM funcionar ###
chroot $destino chown -R lightdm: /var/lib/lightdm

### Adicionando repositório do Flathub ###
chroot $destino flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

### Limpando pacotes já baixados ###
zypper -n --root $destino clean

### Removendo pacotes desnecessários ###
zypper -n --root $destino remove -y --clean-deps java-11-openjdk java-11-openjdk-headless javapackages-filesystem javapackages-tools busybox-ed 

### Ajustando para que o zypper use --no-recommends por padrão ###
# sed -i 's/# solver.onlyRequires = false/solver.onlyRequires = true/g' $destino/etc/zypp/zypp.conf

### Ajustando para que o zypper mude o fornecedor de pacotes por padrão ###
echo -e "\nAjustando para que o zypper mude o fornecedor de pacotes por padrão\n"
sed -i 's/solver.dupAllowVendorChange = false/solver.dupAllowVendorChange = true/' $destino/etc/zypp/zypp.conf

### Ajustando o tempo de atualização automática dos repositórios para 7 dias ###
echo -e "\nAjustando o tempo de atualização automática dos repositórios para 7 dias\n"
sed -i '/# repo.refresh.delay = 10/a repo.refresh.delay = 10080' $destino/etc/zypp/zypp.conf

### Instalando o tema Adapta ###
comando_1="wget https://github.com/jpmsb/preparando-computador-para-engenharia-de-tele/raw/main/tema-adapta.tar.tar -O /tmp/adapta.tar.tar"

tentar "$comando_1" $tentivas_maximas

mkdir -p $destino/usr/share/themes/Adapta
tar -xvf /tmp/adapta.tar.tar -C $destino/usr/share/themes

### Habilitando a tela de boas vindas ###
cp $destino/usr/share/applications/org.opensuse.opensuse_welcome.desktop $destino/etc/xdg/autostart/org.opensuse.opensuse_welcome.desktop

### Instalando a fonte Noto Mono Nerd Font ###
comando_1="wget https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Noto/Mono/NotoMonoNerdFontMono-Regular.ttf -O $destino/usr/share/fonts/NotoMonoNerdFontMono-Regular.ttf"

tentar "$comando_1" $tentivas_maximas

chroot $destino fc-cache -rv

### Instalando um skel ###
comando_1="wget https://github.com/jpmsb/preparando-computador-para-engenharia-de-tele/raw/main/skel.tar.gz -O /tmp/skel.tar.gz"

tentar "$comando_1" $tentivas_maximas

tar -xvf /tmp/skel.tar.gz -C $destino/etc/skel

### Ajustando o Package Update Indicator para ###
### utilizar um script customizado            ###
mkdir -p $destino/etc/skel/.config/package-update-indicator/
echo "[General]
refresh-interval=43200
update-command='/usr/local/bin/atualizar-sistema'" > $destino/etc/skel/.config/package-update-indicator/package-update-indicator.conf

### Script para atualizar o sistema ###
wget https://raw.githubusercontent.com/jpmsb/preparando-computador-para-engenharia-de-tele/main/atualizar-sistema -O $destino/usr/local/bin/atualizar-sistema
chmod +x $destino/usr/local/bin/atualizar-sistema

### Criando usuário com poder sudo ###
useradd --root $destino -m --groups kvm,libvirt,wheel,users,video,disk,dialout -c "$nome_completo" --shell /usr/bin/fish $usuario
echo "$usuario:$senha" | chpasswd --root $destino
rm -rf $destino/home/$usuario/bin

### Adicionando caminhos adicionais de binários ###
chroot $destino su -c "fish_add_path /usr/sbin" -s /usr/bin/fish $usuario
chroot $destino su -c "fish_add_path /usr/local/sbin" -s /usr/bin/fish $usuario
chroot $destino su -c "fish_add_path /home/$usuario/.local/bin" -s /usr/bin/fish $usuario

### Criando o cache do tealdeer ###
chroot $destino su -c "/usr/bin/tldr --update" -s /usr/bin/fish $usuario

### Ajustando o tema dos aplicativos do Gnome ###
echo "[org.gnome.desktop.interface]
color-scheme='prefer-dark'" > $destino/usr/share/glib-2.0/schemas/10_org.gnome.desktop.interface.gschema.override
chroot $destino glib-compile-schemas /usr/share/glib-2.0/schemas

### Loja Gnome Software deve preferir o repositório local ao invés de Flatpak ###
echo "[org.gnome.software]
packaging-format-preference = [ 'package', 'flatpak' ]" > $destino/usr/share/glib-2.0/schemas/20_org.gnome.software-jpmsb.gschema.override
chroot $destino glib-compile-schemas /usr/share/glib-2.0/schemas

### Definindo a senha do root para ser a mesma ###
### do primeiro usuário criado                 ###
echo "root:$senha" | chpasswd --root $destino

### Ajustando as permissões dos diretórios do PolicyKit ###
chroot $destino chown -R root:root /usr/share/polkit-1/
chroot $destino chown polkitd:root /usr/share/polkit-1/rules.d
chroot $destino chown polkitd:root /usr/share/polkit-1/rules.d/50-default.rules
chroot $destino chown polkitd:root /etc/polkit-1/rules.d

### Ajustando a zona padrão do Firewalld para 'trusted' ###
chroot $destino firewall-offline-cmd --set-default-zone=trusted

### Desmontando diretórios ###
desmontar_tudo $destino

echo -e "\n\nTudo pronto!! Digite \"sudo reboot\" para reiniciar o seu computador."
