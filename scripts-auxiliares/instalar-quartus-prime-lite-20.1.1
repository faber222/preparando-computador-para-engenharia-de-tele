#!/bin/bash

export NOME_IDE="Quartus Prime Lite Edition"
export DESCRICAO="Ambiente multiplataforma que inclui tudo o que você precisa para projetar FPGAs, SoC FPGAs e CPLDs."
export BIN_IDE="quartus"
export PRODUTO="Quartus-lite"
export VERSAO="20.1.1"
export SUBVERSAO="720"

IFS='.' read -r -a PARTES <<< "$VERSAO"
VERSAO_URL="${PARTES[0]}.${PARTES[1]}std.${PARTES[2]}"
export URL_ARQUIVO="https://downloads.intel.com/akdlm/software/acdsinst/$VERSAO_URL/$SUBVERSAO/ib_tar/$PRODUTO-$VERSAO.$SUBVERSAO-linux.tar"

export NOME_ARQUIVO_DESKTOP="$(echo $NOME_IDE | tr 'A-Z ' 'a-z-')"
export VERDE="\033[1;32m"
export AMARELO="\033[1;33m"
export NORMAL="\033[0m"
export DIR_INSTALACAO="/opt/intelFPGA/$PRODUTO/$VERSAO"
export DIR_TEMP="/opt/intelFPGA/$PRODUTO/temp"
export DEPENDENCIAS=(glibc-32bit glibc-gconv-modules-extra-32bit libbrotlicommon1-32bit libbrotlidec1-32bit libbz2-1-32bit libexpat1-32bit libfontconfig1-32bit libfreetype6-32bit libpng16-16-32bit libX11-6-32bit libXau6-32bit libxcb1-32bit libXft2-32bit libXrender1-32bit libz1-32bit nss-mdns-32bit samba-client-32bit libXext6-32bit libgcc_s1-32bit)

for DEPENDENCIA in "${DEPENDENCIAS[@]}"; do
    rpm -q $DEPENDENCIA > /dev/null || export DEPENDENCIAS_FALTANDO="$DEPENDENCIAS_FALTANDO $DEPENDENCIA"
done

if [ -d "$DIR_INSTALACAO" ]; then
    echo "Esta versão do $NOME_IDE já está instalada."
    echo "Versão: $VERSAO"
    
    while [[ "$resposta" != [sSnN] ]]; do
        read -p "Deseja reinstalar? [s/n] " resposta < /dev/tty
    done

    [[ "$resposta" == [nN] ]] && exit 0
fi

echo -e "\n\n$VERDE--- Instalando $NOME_IDE $VERSAO ---$NORMAL\n\n"

set -e
sudo -E -- bash -c '
    if [ ! -z "$DEPENDENCIAS_FALTANDO" ]; then
        set -e
        barra_rotativa() {
            local barra_inicial="$1"

            if [ -z "$barra_inicial" ]; then
                echo "|"
            elif [ "$barra_inicial" == "|" ]; then
                echo "/"
            elif [ "$barra_inicial" == "/" ]; then
                echo "-"
            elif [ "$barra_inicial" == "-" ]; then
                echo "\\"
            else
                echo "|"
            fi
        }

        echo -e "\n${AMARELO}Instalando dependências faltantes...${NORMAL}\n"
        while [ -s /run/zypp.pid ]; do
            barra="$(barra_rotativa "$barra")"
            echo -ne "O gerenciador de pacotes está ocupado por outro processo. Aguardando liberação... [$barra]\r"
            sleep 0.2
        done

        if [ ! -z "$barra" ]; then echo -e "\n"; fi

        repositorios=$(zypper info ${DEPENDENCIAS_FALTANDO} | grep -E "Reposit.*:" | sed -n "s/^.*: *//p" | sort | uniq)
        IFS=$'\''\n'\''; vetor_repositorios=( $(echo "$repositorios") );

        comando_atualizar_repositorio="zypper --gpg-auto-import-keys refresh -f -r"
        for repositorio in "${vetor_repositorios[@]}"; do
            comando_atualizar_repositorio="$comando_atualizar_repositorio \"$repositorio\""
        done

        bash -c "$comando_atualizar_repositorio"
        bash -c "zypper -n install -y $DEPENDENCIAS_FALTANDO"
        set +e
    fi

    echo -e "\n$VERDE--- Baixando $PRODUTO-$VERSAO.$SUBVERSAO-linux.tar ---$NORMAL\n"
    mkdir -p "$DIR_TEMP"
    ARQUIVO_BAIXADO="$DIR_TEMP/$PRODUTO-$VERSAO.$SUBVERSAO-linux.tar"
    wget -q --show-progress --read-timeout=5 --tries=0 -cO ${ARQUIVO_BAIXADO} ${URL_ARQUIVO}

    set -e
    echo -e "\nExtraindo o arquivo baixado \"${ARQUIVO_BAIXADO}\" para \"$DIR_INSTALACAO/temp\"...\n"
    pv ${ARQUIVO_BAIXADO} | tar -x -C ${DIR_TEMP}
    
    echo -e "\nInstalando $NOME_IDE $VERSAO em \"$DIR_INSTALACAO\". Este processo pode levar vários minutos. Por favor, aguarde...\n"
    rm -rf "$DIR_INSTALACAO"
    mkdir -p "$DIR_INSTALACAO"
    bash $DIR_TEMP/setup.sh --mode unattended --unattendedmodeui minimal --installdir "$DIR_INSTALACAO" --accept_eula 1
    chown -R root:users $DIR_INSTALACAO

    echo -e "\nCriando atalho no menu...\n"
    printf "%s\n"                                            \
        "[Desktop Entry]"                                    \
        "Encoding=UTF-8"                                     \
        "Name=$NOME_IDE $VERSAO"                             \
        "Comment=$DESCRICAO"                                 \
        "Exec=$DIR_INSTALACAO/quartus/bin/$BIN_IDE"          \
        "Icon=$DIR_INSTALACAO/quartus/adm/quartusii.png"     \
        "Terminal=false"                                     \
        "Type=Application"                                   \
        "Categories=Development;IDE;"                        \
        "StartupNotify=true" > /usr/share/applications/$NOME_ARQUIVO_DESKTOP-$VERSAO.desktop

    printf "%s\n"                                            \
        "set quartus_path $DIR_INSTALACAO/quartus/bin"       \
        ""                                                   \
        "if not contains \$quartus_path \$PATH"              \
        "    set PATH \$quartus_path \$PATH"                 \
        "end" > /etc/fish/conf.d/quartus_path_$VERSAO.fish

    printf "%s\n"                                            \
        "new_path=\"$DIR_INSTALACAO/quartus/bin\""           \
        ""                                                   \
        "if [[ \":\$PATH:\" != *\":\$new_path:\"* ]]; then"  \
        "    export PATH=\"\$new_path:\$PATH\""              \
        "fi" > /etc/profile.d/quartus_path_$VERSAO.sh

    echo -e "\nRemovendo arquivos temporários...\n"
    rm -rf "$DIR_TEMP"
'

echo -e "O $NOME_IDE $VERSAO foi instalado com sucesso.\n"

echo -e "${VERDE}Você pode iniciar o $NOME_IDE a partir do menu ou executando o comando \"$BIN_IDE\" em um novo terminal.${NORMAL}"
